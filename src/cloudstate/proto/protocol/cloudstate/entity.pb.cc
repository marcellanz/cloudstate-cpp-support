// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/cloudstate/entity.proto

#include "protocol/cloudstate/entity.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcloudstate_2fentity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Entity_protocol_2fcloudstate_2fentity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcloudstate_2fentity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Failure_protocol_2fcloudstate_2fentity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcloudstate_2fentity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Forward_protocol_2fcloudstate_2fentity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcloudstate_2fentity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Reply_protocol_2fcloudstate_2fentity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcloudstate_2fentity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceInfo_protocol_2fcloudstate_2fentity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace cloudstate {
class ReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reply> _instance;
} _Reply_default_instance_;
class ForwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Forward> _instance;
} _Forward_default_instance_;
class ClientActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientAction> _instance;
  const ::cloudstate::Reply* reply_;
  const ::cloudstate::Forward* forward_;
  const ::cloudstate::Failure* failure_;
} _ClientAction_default_instance_;
class SideEffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SideEffect> _instance;
} _SideEffect_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command> _instance;
} _Command_default_instance_;
class StreamCancelledDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamCancelled> _instance;
} _StreamCancelled_default_instance_;
class FailureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Failure> _instance;
} _Failure_default_instance_;
class EntitySpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntitySpec> _instance;
} _EntitySpec_default_instance_;
class ServiceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceInfo> _instance;
} _ServiceInfo_default_instance_;
class EntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entity> _instance;
} _Entity_default_instance_;
class UserFunctionErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserFunctionError> _instance;
} _UserFunctionError_default_instance_;
class ProxyInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProxyInfo> _instance;
} _ProxyInfo_default_instance_;
}  // namespace cloudstate
static void InitDefaultsscc_info_ClientAction_protocol_2fcloudstate_2fentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::_ClientAction_default_instance_;
    new (ptr) ::cloudstate::ClientAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::ClientAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClientAction_protocol_2fcloudstate_2fentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ClientAction_protocol_2fcloudstate_2fentity_2eproto}, {
      &scc_info_Reply_protocol_2fcloudstate_2fentity_2eproto.base,
      &scc_info_Forward_protocol_2fcloudstate_2fentity_2eproto.base,
      &scc_info_Failure_protocol_2fcloudstate_2fentity_2eproto.base,}};

static void InitDefaultsscc_info_Command_protocol_2fcloudstate_2fentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::_Command_default_instance_;
    new (ptr) ::cloudstate::Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Command_protocol_2fcloudstate_2fentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Command_protocol_2fcloudstate_2fentity_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_Entity_protocol_2fcloudstate_2fentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::_Entity_default_instance_;
    new (ptr) ::cloudstate::Entity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::Entity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Entity_protocol_2fcloudstate_2fentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Entity_protocol_2fcloudstate_2fentity_2eproto}, {}};

static void InitDefaultsscc_info_EntitySpec_protocol_2fcloudstate_2fentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::_EntitySpec_default_instance_;
    new (ptr) ::cloudstate::EntitySpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::EntitySpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EntitySpec_protocol_2fcloudstate_2fentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EntitySpec_protocol_2fcloudstate_2fentity_2eproto}, {
      &scc_info_Entity_protocol_2fcloudstate_2fentity_2eproto.base,
      &scc_info_ServiceInfo_protocol_2fcloudstate_2fentity_2eproto.base,}};

static void InitDefaultsscc_info_Failure_protocol_2fcloudstate_2fentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::_Failure_default_instance_;
    new (ptr) ::cloudstate::Failure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::Failure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Failure_protocol_2fcloudstate_2fentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Failure_protocol_2fcloudstate_2fentity_2eproto}, {}};

static void InitDefaultsscc_info_Forward_protocol_2fcloudstate_2fentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::_Forward_default_instance_;
    new (ptr) ::cloudstate::Forward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::Forward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Forward_protocol_2fcloudstate_2fentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Forward_protocol_2fcloudstate_2fentity_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ProxyInfo_protocol_2fcloudstate_2fentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::_ProxyInfo_default_instance_;
    new (ptr) ::cloudstate::ProxyInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::ProxyInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProxyInfo_protocol_2fcloudstate_2fentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProxyInfo_protocol_2fcloudstate_2fentity_2eproto}, {}};

static void InitDefaultsscc_info_Reply_protocol_2fcloudstate_2fentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::_Reply_default_instance_;
    new (ptr) ::cloudstate::Reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::Reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Reply_protocol_2fcloudstate_2fentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Reply_protocol_2fcloudstate_2fentity_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ServiceInfo_protocol_2fcloudstate_2fentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::_ServiceInfo_default_instance_;
    new (ptr) ::cloudstate::ServiceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::ServiceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceInfo_protocol_2fcloudstate_2fentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceInfo_protocol_2fcloudstate_2fentity_2eproto}, {}};

static void InitDefaultsscc_info_SideEffect_protocol_2fcloudstate_2fentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::_SideEffect_default_instance_;
    new (ptr) ::cloudstate::SideEffect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::SideEffect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SideEffect_protocol_2fcloudstate_2fentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SideEffect_protocol_2fcloudstate_2fentity_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_StreamCancelled_protocol_2fcloudstate_2fentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::_StreamCancelled_default_instance_;
    new (ptr) ::cloudstate::StreamCancelled();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::StreamCancelled::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamCancelled_protocol_2fcloudstate_2fentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamCancelled_protocol_2fcloudstate_2fentity_2eproto}, {}};

static void InitDefaultsscc_info_UserFunctionError_protocol_2fcloudstate_2fentity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::_UserFunctionError_default_instance_;
    new (ptr) ::cloudstate::UserFunctionError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::UserFunctionError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserFunctionError_protocol_2fcloudstate_2fentity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserFunctionError_protocol_2fcloudstate_2fentity_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2fcloudstate_2fentity_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protocol_2fcloudstate_2fentity_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2fcloudstate_2fentity_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2fcloudstate_2fentity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::Reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::Reply, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::Forward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::Forward, service_name_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::Forward, command_name_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::Forward, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::ClientAction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cloudstate::ClientAction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::cloudstate::ClientActionDefaultTypeInternal, reply_),
  offsetof(::cloudstate::ClientActionDefaultTypeInternal, forward_),
  offsetof(::cloudstate::ClientActionDefaultTypeInternal, failure_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::ClientAction, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::SideEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::SideEffect, service_name_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::SideEffect, command_name_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::SideEffect, payload_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::SideEffect, synchronous_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::Command, entity_id_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::Command, id_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::Command, name_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::Command, payload_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::Command, streamed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::StreamCancelled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::StreamCancelled, entity_id_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::StreamCancelled, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::Failure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::Failure, command_id_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::Failure, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::EntitySpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::EntitySpec, proto_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::EntitySpec, entities_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::EntitySpec, service_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::ServiceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::ServiceInfo, service_name_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::ServiceInfo, service_version_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::ServiceInfo, service_runtime_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::ServiceInfo, support_library_name_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::ServiceInfo, support_library_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::Entity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::Entity, entity_type_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::Entity, service_name_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::Entity, persistence_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::UserFunctionError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::UserFunctionError, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::ProxyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::ProxyInfo, protocol_major_version_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::ProxyInfo, protocol_minor_version_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::ProxyInfo, proxy_name_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::ProxyInfo, proxy_version_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::ProxyInfo, supported_entity_types_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cloudstate::Reply)},
  { 6, -1, sizeof(::cloudstate::Forward)},
  { 14, -1, sizeof(::cloudstate::ClientAction)},
  { 23, -1, sizeof(::cloudstate::SideEffect)},
  { 32, -1, sizeof(::cloudstate::Command)},
  { 42, -1, sizeof(::cloudstate::StreamCancelled)},
  { 49, -1, sizeof(::cloudstate::Failure)},
  { 56, -1, sizeof(::cloudstate::EntitySpec)},
  { 64, -1, sizeof(::cloudstate::ServiceInfo)},
  { 74, -1, sizeof(::cloudstate::Entity)},
  { 82, -1, sizeof(::cloudstate::UserFunctionError)},
  { 88, -1, sizeof(::cloudstate::ProxyInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::_Reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::_Forward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::_ClientAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::_SideEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::_Command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::_StreamCancelled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::_Failure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::_EntitySpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::_ServiceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::_Entity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::_UserFunctionError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::_ProxyInfo_default_instance_),
};

const char descriptor_table_protodef_protocol_2fcloudstate_2fentity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n protocol/cloudstate/entity.proto\022\nclou"
  "dstate\032\031google/protobuf/any.proto\032\033googl"
  "e/protobuf/empty.proto\032 google/protobuf/"
  "descriptor.proto\".\n\005Reply\022%\n\007payload\030\001 \001"
  "(\0132\024.google.protobuf.Any\"\\\n\007Forward\022\024\n\014s"
  "ervice_name\030\001 \001(\t\022\024\n\014command_name\030\002 \001(\t\022"
  "%\n\007payload\030\003 \001(\0132\024.google.protobuf.Any\"\214"
  "\001\n\014ClientAction\022\"\n\005reply\030\001 \001(\0132\021.cloudst"
  "ate.ReplyH\000\022&\n\007forward\030\002 \001(\0132\023.cloudstat"
  "e.ForwardH\000\022&\n\007failure\030\003 \001(\0132\023.cloudstat"
  "e.FailureH\000B\010\n\006action\"t\n\nSideEffect\022\024\n\014s"
  "ervice_name\030\001 \001(\t\022\024\n\014command_name\030\002 \001(\t\022"
  "%\n\007payload\030\003 \001(\0132\024.google.protobuf.Any\022\023"
  "\n\013synchronous\030\004 \001(\010\"o\n\007Command\022\021\n\tentity"
  "_id\030\001 \001(\t\022\n\n\002id\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022%\n\007p"
  "ayload\030\004 \001(\0132\024.google.protobuf.Any\022\020\n\010st"
  "reamed\030\005 \001(\010\"0\n\017StreamCancelled\022\021\n\tentit"
  "y_id\030\001 \001(\t\022\n\n\002id\030\002 \001(\003\"2\n\007Failure\022\022\n\ncom"
  "mand_id\030\001 \001(\003\022\023\n\013description\030\002 \001(\t\"p\n\nEn"
  "titySpec\022\r\n\005proto\030\001 \001(\014\022$\n\010entities\030\002 \003("
  "\0132\022.cloudstate.Entity\022-\n\014service_info\030\003 "
  "\001(\0132\027.cloudstate.ServiceInfo\"\224\001\n\013Service"
  "Info\022\024\n\014service_name\030\001 \001(\t\022\027\n\017service_ve"
  "rsion\030\002 \001(\t\022\027\n\017service_runtime\030\003 \001(\t\022\034\n\024"
  "support_library_name\030\004 \001(\t\022\037\n\027support_li"
  "brary_version\030\005 \001(\t\"K\n\006Entity\022\023\n\013entity_"
  "type\030\001 \001(\t\022\024\n\014service_name\030\002 \001(\t\022\026\n\016pers"
  "istence_id\030\003 \001(\t\"$\n\021UserFunctionError\022\017\n"
  "\007message\030\001 \001(\t\"\226\001\n\tProxyInfo\022\036\n\026protocol"
  "_major_version\030\001 \001(\005\022\036\n\026protocol_minor_v"
  "ersion\030\002 \001(\005\022\022\n\nproxy_name\030\003 \001(\t\022\025\n\rprox"
  "y_version\030\004 \001(\t\022\036\n\026supported_entity_type"
  "s\030\005 \003(\t2\226\001\n\017EntityDiscovery\022;\n\010discover\022"
  "\025.cloudstate.ProxyInfo\032\026.cloudstate.Enti"
  "tySpec\"\000\022F\n\013reportError\022\035.cloudstate.Use"
  "rFunctionError\032\026.google.protobuf.Empty\"\000"
  "B-\n\026io.cloudstate.protocolZ\023cloudstate/p"
  "rotocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2fcloudstate_2fentity_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_2fcloudstate_2fentity_2eproto_sccs[12] = {
  &scc_info_ClientAction_protocol_2fcloudstate_2fentity_2eproto.base,
  &scc_info_Command_protocol_2fcloudstate_2fentity_2eproto.base,
  &scc_info_Entity_protocol_2fcloudstate_2fentity_2eproto.base,
  &scc_info_EntitySpec_protocol_2fcloudstate_2fentity_2eproto.base,
  &scc_info_Failure_protocol_2fcloudstate_2fentity_2eproto.base,
  &scc_info_Forward_protocol_2fcloudstate_2fentity_2eproto.base,
  &scc_info_ProxyInfo_protocol_2fcloudstate_2fentity_2eproto.base,
  &scc_info_Reply_protocol_2fcloudstate_2fentity_2eproto.base,
  &scc_info_ServiceInfo_protocol_2fcloudstate_2fentity_2eproto.base,
  &scc_info_SideEffect_protocol_2fcloudstate_2fentity_2eproto.base,
  &scc_info_StreamCancelled_protocol_2fcloudstate_2fentity_2eproto.base,
  &scc_info_UserFunctionError_protocol_2fcloudstate_2fentity_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2fcloudstate_2fentity_2eproto_once;
static bool descriptor_table_protocol_2fcloudstate_2fentity_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fcloudstate_2fentity_2eproto = {
  &descriptor_table_protocol_2fcloudstate_2fentity_2eproto_initialized, descriptor_table_protodef_protocol_2fcloudstate_2fentity_2eproto, "protocol/cloudstate/entity.proto", 1495,
  &descriptor_table_protocol_2fcloudstate_2fentity_2eproto_once, descriptor_table_protocol_2fcloudstate_2fentity_2eproto_sccs, descriptor_table_protocol_2fcloudstate_2fentity_2eproto_deps, 12, 3,
  schemas, file_default_instances, TableStruct_protocol_2fcloudstate_2fentity_2eproto::offsets,
  file_level_metadata_protocol_2fcloudstate_2fentity_2eproto, 12, file_level_enum_descriptors_protocol_2fcloudstate_2fentity_2eproto, file_level_service_descriptors_protocol_2fcloudstate_2fentity_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_2fcloudstate_2fentity_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_2fcloudstate_2fentity_2eproto), true);
namespace cloudstate {

// ===================================================================

void Reply::InitAsDefaultInstance() {
  ::cloudstate::_Reply_default_instance_._instance.get_mutable()->payload_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Reply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& payload(const Reply* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Reply::_Internal::payload(const Reply* msg) {
  return *msg->payload_;
}
void Reply::clear_payload() {
  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
Reply::Reply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.Reply)
}
Reply::Reply(const Reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new PROTOBUF_NAMESPACE_ID::Any(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cloudstate.Reply)
}

void Reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reply_protocol_2fcloudstate_2fentity_2eproto.base);
  payload_ = nullptr;
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:cloudstate.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  if (this != internal_default_instance()) delete payload_;
}

void Reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reply& Reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reply_protocol_2fcloudstate_2fentity_2eproto.base);
  return *internal_default_instance();
}


void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.Reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.Reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 1;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.Reply)
  return target;
}

size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.Reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 1;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  const Reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.Reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.Reply)
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_payload()) {
    _internal_mutable_payload()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_payload());
  }
}

void Reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  return true;
}

void Reply::InternalSwap(Reply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Forward::InitAsDefaultInstance() {
  ::cloudstate::_Forward_default_instance_._instance.get_mutable()->payload_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Forward::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& payload(const Forward* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Forward::_Internal::payload(const Forward* msg) {
  return *msg->payload_;
}
void Forward::clear_payload() {
  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
Forward::Forward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.Forward)
}
Forward::Forward(const Forward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  command_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command_name().empty()) {
    command_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_name_);
  }
  if (from._internal_has_payload()) {
    payload_ = new PROTOBUF_NAMESPACE_ID::Any(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cloudstate.Forward)
}

void Forward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Forward_protocol_2fcloudstate_2fentity_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_ = nullptr;
}

Forward::~Forward() {
  // @@protoc_insertion_point(destructor:cloudstate.Forward)
  SharedDtor();
}

void Forward::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete payload_;
}

void Forward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Forward& Forward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Forward_protocol_2fcloudstate_2fentity_2eproto.base);
  return *internal_default_instance();
}


void Forward::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.Forward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Forward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.Forward.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string command_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_command_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.Forward.command_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Forward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.Forward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.Forward.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string command_name = 2;
  if (this->command_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command_name().data(), static_cast<int>(this->_internal_command_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.Forward.command_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command_name(), target);
  }

  // .google.protobuf.Any payload = 3;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.Forward)
  return target;
}

size_t Forward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.Forward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string command_name = 2;
  if (this->command_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command_name());
  }

  // .google.protobuf.Any payload = 3;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Forward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.Forward)
  GOOGLE_DCHECK_NE(&from, this);
  const Forward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Forward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.Forward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.Forward)
    MergeFrom(*source);
  }
}

void Forward::MergeFrom(const Forward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.Forward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.command_name().size() > 0) {

    command_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_name_);
  }
  if (from.has_payload()) {
    _internal_mutable_payload()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_payload());
  }
}

void Forward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.Forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Forward::CopyFrom(const Forward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.Forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Forward::IsInitialized() const {
  return true;
}

void Forward::InternalSwap(Forward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  command_name_.Swap(&other->command_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payload_, other->payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Forward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientAction::InitAsDefaultInstance() {
  ::cloudstate::_ClientAction_default_instance_.reply_ = const_cast< ::cloudstate::Reply*>(
      ::cloudstate::Reply::internal_default_instance());
  ::cloudstate::_ClientAction_default_instance_.forward_ = const_cast< ::cloudstate::Forward*>(
      ::cloudstate::Forward::internal_default_instance());
  ::cloudstate::_ClientAction_default_instance_.failure_ = const_cast< ::cloudstate::Failure*>(
      ::cloudstate::Failure::internal_default_instance());
}
class ClientAction::_Internal {
 public:
  static const ::cloudstate::Reply& reply(const ClientAction* msg);
  static const ::cloudstate::Forward& forward(const ClientAction* msg);
  static const ::cloudstate::Failure& failure(const ClientAction* msg);
};

const ::cloudstate::Reply&
ClientAction::_Internal::reply(const ClientAction* msg) {
  return *msg->action_.reply_;
}
const ::cloudstate::Forward&
ClientAction::_Internal::forward(const ClientAction* msg) {
  return *msg->action_.forward_;
}
const ::cloudstate::Failure&
ClientAction::_Internal::failure(const ClientAction* msg) {
  return *msg->action_.failure_;
}
void ClientAction::set_allocated_reply(::cloudstate::Reply* reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply, submessage_arena);
    }
    set_has_reply();
    action_.reply_ = reply;
  }
  // @@protoc_insertion_point(field_set_allocated:cloudstate.ClientAction.reply)
}
void ClientAction::set_allocated_forward(::cloudstate::Forward* forward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (forward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      forward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward, submessage_arena);
    }
    set_has_forward();
    action_.forward_ = forward;
  }
  // @@protoc_insertion_point(field_set_allocated:cloudstate.ClientAction.forward)
}
void ClientAction::set_allocated_failure(::cloudstate::Failure* failure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (failure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      failure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    set_has_failure();
    action_.failure_ = failure;
  }
  // @@protoc_insertion_point(field_set_allocated:cloudstate.ClientAction.failure)
}
ClientAction::ClientAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.ClientAction)
}
ClientAction::ClientAction(const ClientAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kReply: {
      _internal_mutable_reply()->::cloudstate::Reply::MergeFrom(from._internal_reply());
      break;
    }
    case kForward: {
      _internal_mutable_forward()->::cloudstate::Forward::MergeFrom(from._internal_forward());
      break;
    }
    case kFailure: {
      _internal_mutable_failure()->::cloudstate::Failure::MergeFrom(from._internal_failure());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cloudstate.ClientAction)
}

void ClientAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientAction_protocol_2fcloudstate_2fentity_2eproto.base);
  clear_has_action();
}

ClientAction::~ClientAction() {
  // @@protoc_insertion_point(destructor:cloudstate.ClientAction)
  SharedDtor();
}

void ClientAction::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
}

void ClientAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientAction& ClientAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientAction_protocol_2fcloudstate_2fentity_2eproto.base);
  return *internal_default_instance();
}


void ClientAction::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:cloudstate.ClientAction)
  switch (action_case()) {
    case kReply: {
      delete action_.reply_;
      break;
    }
    case kForward: {
      delete action_.forward_;
      break;
    }
    case kFailure: {
      delete action_.failure_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ClientAction::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.ClientAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear();
}

const char* ClientAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cloudstate.Reply reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cloudstate.Forward forward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cloudstate.Failure failure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_failure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.ClientAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cloudstate.Reply reply = 1;
  if (_internal_has_reply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reply(this), target, stream);
  }

  // .cloudstate.Forward forward = 2;
  if (_internal_has_forward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::forward(this), target, stream);
  }

  // .cloudstate.Failure failure = 3;
  if (_internal_has_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::failure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.ClientAction)
  return target;
}

size_t ClientAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.ClientAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // .cloudstate.Reply reply = 1;
    case kReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.reply_);
      break;
    }
    // .cloudstate.Forward forward = 2;
    case kForward: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.forward_);
      break;
    }
    // .cloudstate.Failure failure = 3;
    case kFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.failure_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.ClientAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.ClientAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.ClientAction)
    MergeFrom(*source);
  }
}

void ClientAction::MergeFrom(const ClientAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.ClientAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kReply: {
      _internal_mutable_reply()->::cloudstate::Reply::MergeFrom(from._internal_reply());
      break;
    }
    case kForward: {
      _internal_mutable_forward()->::cloudstate::Forward::MergeFrom(from._internal_forward());
      break;
    }
    case kFailure: {
      _internal_mutable_failure()->::cloudstate::Failure::MergeFrom(from._internal_failure());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void ClientAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.ClientAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientAction::CopyFrom(const ClientAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.ClientAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAction::IsInitialized() const {
  return true;
}

void ClientAction::InternalSwap(ClientAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SideEffect::InitAsDefaultInstance() {
  ::cloudstate::_SideEffect_default_instance_._instance.get_mutable()->payload_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class SideEffect::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& payload(const SideEffect* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
SideEffect::_Internal::payload(const SideEffect* msg) {
  return *msg->payload_;
}
void SideEffect::clear_payload() {
  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
SideEffect::SideEffect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.SideEffect)
}
SideEffect::SideEffect(const SideEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  command_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command_name().empty()) {
    command_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_name_);
  }
  if (from._internal_has_payload()) {
    payload_ = new PROTOBUF_NAMESPACE_ID::Any(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  synchronous_ = from.synchronous_;
  // @@protoc_insertion_point(copy_constructor:cloudstate.SideEffect)
}

void SideEffect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SideEffect_protocol_2fcloudstate_2fentity_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&payload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&synchronous_) -
      reinterpret_cast<char*>(&payload_)) + sizeof(synchronous_));
}

SideEffect::~SideEffect() {
  // @@protoc_insertion_point(destructor:cloudstate.SideEffect)
  SharedDtor();
}

void SideEffect::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete payload_;
}

void SideEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SideEffect& SideEffect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SideEffect_protocol_2fcloudstate_2fentity_2eproto.base);
  return *internal_default_instance();
}


void SideEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.SideEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  synchronous_ = false;
  _internal_metadata_.Clear();
}

const char* SideEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.SideEffect.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string command_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_command_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.SideEffect.command_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool synchronous = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          synchronous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SideEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.SideEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.SideEffect.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string command_name = 2;
  if (this->command_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command_name().data(), static_cast<int>(this->_internal_command_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.SideEffect.command_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command_name(), target);
  }

  // .google.protobuf.Any payload = 3;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::payload(this), target, stream);
  }

  // bool synchronous = 4;
  if (this->synchronous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_synchronous(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.SideEffect)
  return target;
}

size_t SideEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.SideEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string command_name = 2;
  if (this->command_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command_name());
  }

  // .google.protobuf.Any payload = 3;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // bool synchronous = 4;
  if (this->synchronous() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SideEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.SideEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const SideEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SideEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.SideEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.SideEffect)
    MergeFrom(*source);
  }
}

void SideEffect::MergeFrom(const SideEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.SideEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.command_name().size() > 0) {

    command_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_name_);
  }
  if (from.has_payload()) {
    _internal_mutable_payload()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_payload());
  }
  if (from.synchronous() != 0) {
    _internal_set_synchronous(from._internal_synchronous());
  }
}

void SideEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.SideEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SideEffect::CopyFrom(const SideEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.SideEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideEffect::IsInitialized() const {
  return true;
}

void SideEffect::InternalSwap(SideEffect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  command_name_.Swap(&other->command_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payload_, other->payload_);
  swap(synchronous_, other->synchronous_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SideEffect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::cloudstate::_Command_default_instance_._instance.get_mutable()->payload_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Command::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& payload(const Command* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Command::_Internal::payload(const Command* msg) {
  return *msg->payload_;
}
void Command::clear_payload() {
  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
Command::Command()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entity_id().empty()) {
    entity_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_payload()) {
    payload_ = new PROTOBUF_NAMESPACE_ID::Any(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&streamed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(streamed_));
  // @@protoc_insertion_point(copy_constructor:cloudstate.Command)
}

void Command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Command_protocol_2fcloudstate_2fentity_2eproto.base);
  entity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&payload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&streamed_) -
      reinterpret_cast<char*>(&payload_)) + sizeof(streamed_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:cloudstate.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  entity_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete payload_;
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_protocol_2fcloudstate_2fentity_2eproto.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&streamed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(streamed_));
  _internal_metadata_.Clear();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.Command.entity_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.Command.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool streamed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          streamed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (this->entity_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.Command.entity_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_id(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.Command.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .google.protobuf.Any payload = 4;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::payload(this), target, stream);
  }

  // bool streamed = 5;
  if (this->streamed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_streamed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (this->entity_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any payload = 4;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool streamed = 5;
  if (this->streamed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_id().size() > 0) {

    entity_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_payload()) {
    _internal_mutable_payload()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_payload());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.streamed() != 0) {
    _internal_set_streamed(from._internal_streamed());
  }
}

void Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_id_.Swap(&other->entity_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payload_, other->payload_);
  swap(id_, other->id_);
  swap(streamed_, other->streamed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamCancelled::InitAsDefaultInstance() {
}
class StreamCancelled::_Internal {
 public:
};

StreamCancelled::StreamCancelled()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.StreamCancelled)
}
StreamCancelled::StreamCancelled(const StreamCancelled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entity_id().empty()) {
    entity_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cloudstate.StreamCancelled)
}

void StreamCancelled::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamCancelled_protocol_2fcloudstate_2fentity_2eproto.base);
  entity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

StreamCancelled::~StreamCancelled() {
  // @@protoc_insertion_point(destructor:cloudstate.StreamCancelled)
  SharedDtor();
}

void StreamCancelled::SharedDtor() {
  entity_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamCancelled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamCancelled& StreamCancelled::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamCancelled_protocol_2fcloudstate_2fentity_2eproto.base);
  return *internal_default_instance();
}


void StreamCancelled::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.StreamCancelled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* StreamCancelled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.StreamCancelled.entity_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamCancelled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.StreamCancelled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (this->entity_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.StreamCancelled.entity_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_id(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.StreamCancelled)
  return target;
}

size_t StreamCancelled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.StreamCancelled)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (this->entity_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamCancelled::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.StreamCancelled)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamCancelled* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamCancelled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.StreamCancelled)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.StreamCancelled)
    MergeFrom(*source);
  }
}

void StreamCancelled::MergeFrom(const StreamCancelled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.StreamCancelled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_id().size() > 0) {

    entity_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void StreamCancelled::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.StreamCancelled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamCancelled::CopyFrom(const StreamCancelled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.StreamCancelled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamCancelled::IsInitialized() const {
  return true;
}

void StreamCancelled::InternalSwap(StreamCancelled* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_id_.Swap(&other->entity_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamCancelled::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Failure::InitAsDefaultInstance() {
}
class Failure::_Internal {
 public:
};

Failure::Failure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.Failure)
}
Failure::Failure(const Failure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  command_id_ = from.command_id_;
  // @@protoc_insertion_point(copy_constructor:cloudstate.Failure)
}

void Failure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Failure_protocol_2fcloudstate_2fentity_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_id_ = PROTOBUF_LONGLONG(0);
}

Failure::~Failure() {
  // @@protoc_insertion_point(destructor:cloudstate.Failure)
  SharedDtor();
}

void Failure::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Failure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Failure& Failure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Failure_protocol_2fcloudstate_2fentity_2eproto.base);
  return *internal_default_instance();
}


void Failure::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.Failure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Failure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 command_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.Failure.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Failure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.Failure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 command_id = 1;
  if (this->command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_command_id(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.Failure.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.Failure)
  return target;
}

size_t Failure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.Failure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // int64 command_id = 1;
  if (this->command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_command_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Failure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.Failure)
  GOOGLE_DCHECK_NE(&from, this);
  const Failure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Failure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.Failure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.Failure)
    MergeFrom(*source);
  }
}

void Failure::MergeFrom(const Failure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.Failure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.command_id() != 0) {
    _internal_set_command_id(from._internal_command_id());
  }
}

void Failure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.Failure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Failure::CopyFrom(const Failure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.Failure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Failure::IsInitialized() const {
  return true;
}

void Failure::InternalSwap(Failure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(command_id_, other->command_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Failure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EntitySpec::InitAsDefaultInstance() {
  ::cloudstate::_EntitySpec_default_instance_._instance.get_mutable()->service_info_ = const_cast< ::cloudstate::ServiceInfo*>(
      ::cloudstate::ServiceInfo::internal_default_instance());
}
class EntitySpec::_Internal {
 public:
  static const ::cloudstate::ServiceInfo& service_info(const EntitySpec* msg);
};

const ::cloudstate::ServiceInfo&
EntitySpec::_Internal::service_info(const EntitySpec* msg) {
  return *msg->service_info_;
}
EntitySpec::EntitySpec()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.EntitySpec)
}
EntitySpec::EntitySpec(const EntitySpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proto().empty()) {
    proto_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proto_);
  }
  if (from._internal_has_service_info()) {
    service_info_ = new ::cloudstate::ServiceInfo(*from.service_info_);
  } else {
    service_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cloudstate.EntitySpec)
}

void EntitySpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntitySpec_protocol_2fcloudstate_2fentity_2eproto.base);
  proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_info_ = nullptr;
}

EntitySpec::~EntitySpec() {
  // @@protoc_insertion_point(destructor:cloudstate.EntitySpec)
  SharedDtor();
}

void EntitySpec::SharedDtor() {
  proto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete service_info_;
}

void EntitySpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntitySpec& EntitySpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntitySpec_protocol_2fcloudstate_2fentity_2eproto.base);
  return *internal_default_instance();
}


void EntitySpec::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.EntitySpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  proto_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* EntitySpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes proto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cloudstate.Entity entities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .cloudstate.ServiceInfo service_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntitySpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.EntitySpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes proto = 1;
  if (this->proto().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_proto(), target);
  }

  // repeated .cloudstate.Entity entities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entities(i), target, stream);
  }

  // .cloudstate.ServiceInfo service_info = 3;
  if (this->has_service_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::service_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.EntitySpec)
  return target;
}

size_t EntitySpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.EntitySpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cloudstate.Entity entities = 2;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes proto = 1;
  if (this->proto().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proto());
  }

  // .cloudstate.ServiceInfo service_info = 3;
  if (this->has_service_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntitySpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.EntitySpec)
  GOOGLE_DCHECK_NE(&from, this);
  const EntitySpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntitySpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.EntitySpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.EntitySpec)
    MergeFrom(*source);
  }
}

void EntitySpec::MergeFrom(const EntitySpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.EntitySpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  if (from.proto().size() > 0) {

    proto_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proto_);
  }
  if (from.has_service_info()) {
    _internal_mutable_service_info()->::cloudstate::ServiceInfo::MergeFrom(from._internal_service_info());
  }
}

void EntitySpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.EntitySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntitySpec::CopyFrom(const EntitySpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.EntitySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySpec::IsInitialized() const {
  return true;
}

void EntitySpec::InternalSwap(EntitySpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entities_.InternalSwap(&other->entities_);
  proto_.Swap(&other->proto_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(service_info_, other->service_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntitySpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceInfo::InitAsDefaultInstance() {
}
class ServiceInfo::_Internal {
 public:
};

ServiceInfo::ServiceInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.ServiceInfo)
}
ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  service_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_version().empty()) {
    service_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_version_);
  }
  service_runtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_runtime().empty()) {
    service_runtime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_runtime_);
  }
  support_library_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_support_library_name().empty()) {
    support_library_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.support_library_name_);
  }
  support_library_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_support_library_version().empty()) {
    support_library_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.support_library_version_);
  }
  // @@protoc_insertion_point(copy_constructor:cloudstate.ServiceInfo)
}

void ServiceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceInfo_protocol_2fcloudstate_2fentity_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_runtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_library_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_library_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServiceInfo::~ServiceInfo() {
  // @@protoc_insertion_point(destructor:cloudstate.ServiceInfo)
  SharedDtor();
}

void ServiceInfo::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_runtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_library_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_library_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceInfo& ServiceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceInfo_protocol_2fcloudstate_2fentity_2eproto.base);
  return *internal_default_instance();
}


void ServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.ServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_runtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_library_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_library_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ServiceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.ServiceInfo.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_service_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.ServiceInfo.service_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_runtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_service_runtime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.ServiceInfo.service_runtime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string support_library_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_support_library_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.ServiceInfo.support_library_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string support_library_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_support_library_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.ServiceInfo.support_library_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.ServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.ServiceInfo.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string service_version = 2;
  if (this->service_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_version().data(), static_cast<int>(this->_internal_service_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.ServiceInfo.service_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_version(), target);
  }

  // string service_runtime = 3;
  if (this->service_runtime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_runtime().data(), static_cast<int>(this->_internal_service_runtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.ServiceInfo.service_runtime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_runtime(), target);
  }

  // string support_library_name = 4;
  if (this->support_library_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_support_library_name().data(), static_cast<int>(this->_internal_support_library_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.ServiceInfo.support_library_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_support_library_name(), target);
  }

  // string support_library_version = 5;
  if (this->support_library_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_support_library_version().data(), static_cast<int>(this->_internal_support_library_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.ServiceInfo.support_library_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_support_library_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.ServiceInfo)
  return target;
}

size_t ServiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.ServiceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string service_version = 2;
  if (this->service_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_version());
  }

  // string service_runtime = 3;
  if (this->service_runtime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_runtime());
  }

  // string support_library_name = 4;
  if (this->support_library_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_support_library_name());
  }

  // string support_library_version = 5;
  if (this->support_library_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_support_library_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.ServiceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.ServiceInfo)
    MergeFrom(*source);
  }
}

void ServiceInfo::MergeFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.service_version().size() > 0) {

    service_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_version_);
  }
  if (from.service_runtime().size() > 0) {

    service_runtime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_runtime_);
  }
  if (from.support_library_name().size() > 0) {

    support_library_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.support_library_name_);
  }
  if (from.support_library_version().size() > 0) {

    support_library_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.support_library_version_);
  }
}

void ServiceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {
  return true;
}

void ServiceInfo::InternalSwap(ServiceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_version_.Swap(&other->service_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_runtime_.Swap(&other->service_runtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  support_library_name_.Swap(&other->support_library_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  support_library_version_.Swap(&other->support_library_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Entity::InitAsDefaultInstance() {
}
class Entity::_Internal {
 public:
};

Entity::Entity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.Entity)
}
Entity::Entity(const Entity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entity_type().empty()) {
    entity_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_type_);
  }
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  persistence_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_persistence_id().empty()) {
    persistence_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.persistence_id_);
  }
  // @@protoc_insertion_point(copy_constructor:cloudstate.Entity)
}

void Entity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entity_protocol_2fcloudstate_2fentity_2eproto.base);
  entity_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  persistence_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:cloudstate.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  entity_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  persistence_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Entity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entity& Entity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entity_protocol_2fcloudstate_2fentity_2eproto.base);
  return *internal_default_instance();
}


void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.Entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  persistence_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Entity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entity_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.Entity.entity_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.Entity.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string persistence_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_persistence_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.Entity.persistence_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.Entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_type = 1;
  if (this->entity_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_type().data(), static_cast<int>(this->_internal_entity_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.Entity.entity_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_type(), target);
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.Entity.service_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_name(), target);
  }

  // string persistence_id = 3;
  if (this->persistence_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_persistence_id().data(), static_cast<int>(this->_internal_persistence_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.Entity.persistence_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_persistence_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.Entity)
  return target;
}

size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.Entity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_type = 1;
  if (this->entity_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_type());
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string persistence_id = 3;
  if (this->persistence_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_persistence_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  const Entity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.Entity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.Entity)
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_type().size() > 0) {

    entity_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_type_);
  }
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.persistence_id().size() > 0) {

    persistence_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.persistence_id_);
  }
}

void Entity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  return true;
}

void Entity::InternalSwap(Entity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_type_.Swap(&other->entity_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  persistence_id_.Swap(&other->persistence_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Entity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserFunctionError::InitAsDefaultInstance() {
}
class UserFunctionError::_Internal {
 public:
};

UserFunctionError::UserFunctionError()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.UserFunctionError)
}
UserFunctionError::UserFunctionError(const UserFunctionError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:cloudstate.UserFunctionError)
}

void UserFunctionError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserFunctionError_protocol_2fcloudstate_2fentity_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserFunctionError::~UserFunctionError() {
  // @@protoc_insertion_point(destructor:cloudstate.UserFunctionError)
  SharedDtor();
}

void UserFunctionError::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserFunctionError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserFunctionError& UserFunctionError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserFunctionError_protocol_2fcloudstate_2fentity_2eproto.base);
  return *internal_default_instance();
}


void UserFunctionError::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.UserFunctionError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UserFunctionError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.UserFunctionError.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserFunctionError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.UserFunctionError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.UserFunctionError.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.UserFunctionError)
  return target;
}

size_t UserFunctionError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.UserFunctionError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFunctionError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.UserFunctionError)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFunctionError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserFunctionError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.UserFunctionError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.UserFunctionError)
    MergeFrom(*source);
  }
}

void UserFunctionError::MergeFrom(const UserFunctionError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.UserFunctionError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void UserFunctionError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.UserFunctionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFunctionError::CopyFrom(const UserFunctionError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.UserFunctionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFunctionError::IsInitialized() const {
  return true;
}

void UserFunctionError::InternalSwap(UserFunctionError* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserFunctionError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProxyInfo::InitAsDefaultInstance() {
}
class ProxyInfo::_Internal {
 public:
};

ProxyInfo::ProxyInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.ProxyInfo)
}
ProxyInfo::ProxyInfo(const ProxyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      supported_entity_types_(from.supported_entity_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proxy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proxy_name().empty()) {
    proxy_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_name_);
  }
  proxy_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proxy_version().empty()) {
    proxy_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  ::memcpy(&protocol_major_version_, &from.protocol_major_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_minor_version_) -
    reinterpret_cast<char*>(&protocol_major_version_)) + sizeof(protocol_minor_version_));
  // @@protoc_insertion_point(copy_constructor:cloudstate.ProxyInfo)
}

void ProxyInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProxyInfo_protocol_2fcloudstate_2fentity_2eproto.base);
  proxy_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_major_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_minor_version_) -
      reinterpret_cast<char*>(&protocol_major_version_)) + sizeof(protocol_minor_version_));
}

ProxyInfo::~ProxyInfo() {
  // @@protoc_insertion_point(destructor:cloudstate.ProxyInfo)
  SharedDtor();
}

void ProxyInfo::SharedDtor() {
  proxy_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProxyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProxyInfo& ProxyInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProxyInfo_protocol_2fcloudstate_2fentity_2eproto.base);
  return *internal_default_instance();
}


void ProxyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.ProxyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_entity_types_.Clear();
  proxy_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_major_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_minor_version_) -
      reinterpret_cast<char*>(&protocol_major_version_)) + sizeof(protocol_minor_version_));
  _internal_metadata_.Clear();
}

const char* ProxyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 protocol_major_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          protocol_major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 protocol_minor_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          protocol_minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string proxy_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_proxy_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.ProxyInfo.proxy_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string proxy_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_proxy_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.ProxyInfo.proxy_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string supported_entity_types = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_supported_entity_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.ProxyInfo.supported_entity_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProxyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.ProxyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 protocol_major_version = 1;
  if (this->protocol_major_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_protocol_major_version(), target);
  }

  // int32 protocol_minor_version = 2;
  if (this->protocol_minor_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_protocol_minor_version(), target);
  }

  // string proxy_name = 3;
  if (this->proxy_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxy_name().data(), static_cast<int>(this->_internal_proxy_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.ProxyInfo.proxy_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_proxy_name(), target);
  }

  // string proxy_version = 4;
  if (this->proxy_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxy_version().data(), static_cast<int>(this->_internal_proxy_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.ProxyInfo.proxy_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_proxy_version(), target);
  }

  // repeated string supported_entity_types = 5;
  for (int i = 0, n = this->_internal_supported_entity_types_size(); i < n; i++) {
    const auto& s = this->_internal_supported_entity_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.ProxyInfo.supported_entity_types");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.ProxyInfo)
  return target;
}

size_t ProxyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.ProxyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string supported_entity_types = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(supported_entity_types_.size());
  for (int i = 0, n = supported_entity_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      supported_entity_types_.Get(i));
  }

  // string proxy_name = 3;
  if (this->proxy_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxy_name());
  }

  // string proxy_version = 4;
  if (this->proxy_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxy_version());
  }

  // int32 protocol_major_version = 1;
  if (this->protocol_major_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_protocol_major_version());
  }

  // int32 protocol_minor_version = 2;
  if (this->protocol_minor_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_protocol_minor_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProxyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.ProxyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProxyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProxyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.ProxyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.ProxyInfo)
    MergeFrom(*source);
  }
}

void ProxyInfo::MergeFrom(const ProxyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.ProxyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_entity_types_.MergeFrom(from.supported_entity_types_);
  if (from.proxy_name().size() > 0) {

    proxy_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_name_);
  }
  if (from.proxy_version().size() > 0) {

    proxy_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_version_);
  }
  if (from.protocol_major_version() != 0) {
    _internal_set_protocol_major_version(from._internal_protocol_major_version());
  }
  if (from.protocol_minor_version() != 0) {
    _internal_set_protocol_minor_version(from._internal_protocol_minor_version());
  }
}

void ProxyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.ProxyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyInfo::CopyFrom(const ProxyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.ProxyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyInfo::IsInitialized() const {
  return true;
}

void ProxyInfo::InternalSwap(ProxyInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  supported_entity_types_.InternalSwap(&other->supported_entity_types_);
  proxy_name_.Swap(&other->proxy_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proxy_version_.Swap(&other->proxy_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(protocol_major_version_, other->protocol_major_version_);
  swap(protocol_minor_version_, other->protocol_minor_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProxyInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cloudstate
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cloudstate::Reply* Arena::CreateMaybeMessage< ::cloudstate::Reply >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::Reply >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::Forward* Arena::CreateMaybeMessage< ::cloudstate::Forward >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::Forward >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::ClientAction* Arena::CreateMaybeMessage< ::cloudstate::ClientAction >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::ClientAction >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::SideEffect* Arena::CreateMaybeMessage< ::cloudstate::SideEffect >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::SideEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::Command* Arena::CreateMaybeMessage< ::cloudstate::Command >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::StreamCancelled* Arena::CreateMaybeMessage< ::cloudstate::StreamCancelled >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::StreamCancelled >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::Failure* Arena::CreateMaybeMessage< ::cloudstate::Failure >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::Failure >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::EntitySpec* Arena::CreateMaybeMessage< ::cloudstate::EntitySpec >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::EntitySpec >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::ServiceInfo* Arena::CreateMaybeMessage< ::cloudstate::ServiceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::ServiceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::Entity* Arena::CreateMaybeMessage< ::cloudstate::Entity >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::Entity >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::UserFunctionError* Arena::CreateMaybeMessage< ::cloudstate::UserFunctionError >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::UserFunctionError >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::ProxyInfo* Arena::CreateMaybeMessage< ::cloudstate::ProxyInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::ProxyInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
