// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/cloudstate/event_sourced.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2fcloudstate_2fevent_5fsourced_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2fcloudstate_2fevent_5fsourced_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "cloudstate/entity.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2fcloudstate_2fevent_5fsourced_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2fcloudstate_2fevent_5fsourced_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto;
namespace cloudstate {
namespace eventsourced {
class EventSourcedEvent;
class EventSourcedEventDefaultTypeInternal;
extern EventSourcedEventDefaultTypeInternal _EventSourcedEvent_default_instance_;
class EventSourcedInit;
class EventSourcedInitDefaultTypeInternal;
extern EventSourcedInitDefaultTypeInternal _EventSourcedInit_default_instance_;
class EventSourcedReply;
class EventSourcedReplyDefaultTypeInternal;
extern EventSourcedReplyDefaultTypeInternal _EventSourcedReply_default_instance_;
class EventSourcedSnapshot;
class EventSourcedSnapshotDefaultTypeInternal;
extern EventSourcedSnapshotDefaultTypeInternal _EventSourcedSnapshot_default_instance_;
class EventSourcedStreamIn;
class EventSourcedStreamInDefaultTypeInternal;
extern EventSourcedStreamInDefaultTypeInternal _EventSourcedStreamIn_default_instance_;
class EventSourcedStreamOut;
class EventSourcedStreamOutDefaultTypeInternal;
extern EventSourcedStreamOutDefaultTypeInternal _EventSourcedStreamOut_default_instance_;
}  // namespace eventsourced
}  // namespace cloudstate
PROTOBUF_NAMESPACE_OPEN
template<> ::cloudstate::eventsourced::EventSourcedEvent* Arena::CreateMaybeMessage<::cloudstate::eventsourced::EventSourcedEvent>(Arena*);
template<> ::cloudstate::eventsourced::EventSourcedInit* Arena::CreateMaybeMessage<::cloudstate::eventsourced::EventSourcedInit>(Arena*);
template<> ::cloudstate::eventsourced::EventSourcedReply* Arena::CreateMaybeMessage<::cloudstate::eventsourced::EventSourcedReply>(Arena*);
template<> ::cloudstate::eventsourced::EventSourcedSnapshot* Arena::CreateMaybeMessage<::cloudstate::eventsourced::EventSourcedSnapshot>(Arena*);
template<> ::cloudstate::eventsourced::EventSourcedStreamIn* Arena::CreateMaybeMessage<::cloudstate::eventsourced::EventSourcedStreamIn>(Arena*);
template<> ::cloudstate::eventsourced::EventSourcedStreamOut* Arena::CreateMaybeMessage<::cloudstate::eventsourced::EventSourcedStreamOut>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cloudstate {
namespace eventsourced {

// ===================================================================

class EventSourcedInit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.eventsourced.EventSourcedInit) */ {
 public:
  EventSourcedInit();
  virtual ~EventSourcedInit();

  EventSourcedInit(const EventSourcedInit& from);
  EventSourcedInit(EventSourcedInit&& from) noexcept
    : EventSourcedInit() {
    *this = ::std::move(from);
  }

  inline EventSourcedInit& operator=(const EventSourcedInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSourcedInit& operator=(EventSourcedInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventSourcedInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSourcedInit* internal_default_instance() {
    return reinterpret_cast<const EventSourcedInit*>(
               &_EventSourcedInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventSourcedInit& a, EventSourcedInit& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSourcedInit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventSourcedInit* New() const final {
    return CreateMaybeMessage<EventSourcedInit>(nullptr);
  }

  EventSourcedInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventSourcedInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventSourcedInit& from);
  void MergeFrom(const EventSourcedInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSourcedInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.eventsourced.EventSourcedInit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kEntityIdFieldNumber = 2,
    kSnapshotFieldNumber = 3,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string entity_id = 2;
  void clear_entity_id();
  const std::string& entity_id() const;
  void set_entity_id(const std::string& value);
  void set_entity_id(std::string&& value);
  void set_entity_id(const char* value);
  void set_entity_id(const char* value, size_t size);
  std::string* mutable_entity_id();
  std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // .cloudstate.eventsourced.EventSourcedSnapshot snapshot = 3;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::cloudstate::eventsourced::EventSourcedSnapshot& snapshot() const;
  ::cloudstate::eventsourced::EventSourcedSnapshot* release_snapshot();
  ::cloudstate::eventsourced::EventSourcedSnapshot* mutable_snapshot();
  void set_allocated_snapshot(::cloudstate::eventsourced::EventSourcedSnapshot* snapshot);
  private:
  const ::cloudstate::eventsourced::EventSourcedSnapshot& _internal_snapshot() const;
  ::cloudstate::eventsourced::EventSourcedSnapshot* _internal_mutable_snapshot();
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.eventsourced.EventSourcedInit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
  ::cloudstate::eventsourced::EventSourcedSnapshot* snapshot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fevent_5fsourced_2eproto;
};
// -------------------------------------------------------------------

class EventSourcedSnapshot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.eventsourced.EventSourcedSnapshot) */ {
 public:
  EventSourcedSnapshot();
  virtual ~EventSourcedSnapshot();

  EventSourcedSnapshot(const EventSourcedSnapshot& from);
  EventSourcedSnapshot(EventSourcedSnapshot&& from) noexcept
    : EventSourcedSnapshot() {
    *this = ::std::move(from);
  }

  inline EventSourcedSnapshot& operator=(const EventSourcedSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSourcedSnapshot& operator=(EventSourcedSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventSourcedSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSourcedSnapshot* internal_default_instance() {
    return reinterpret_cast<const EventSourcedSnapshot*>(
               &_EventSourcedSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventSourcedSnapshot& a, EventSourcedSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSourcedSnapshot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventSourcedSnapshot* New() const final {
    return CreateMaybeMessage<EventSourcedSnapshot>(nullptr);
  }

  EventSourcedSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventSourcedSnapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventSourcedSnapshot& from);
  void MergeFrom(const EventSourcedSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSourcedSnapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.eventsourced.EventSourcedSnapshot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotFieldNumber = 2,
    kSnapshotSequenceFieldNumber = 1,
  };
  // .google.protobuf.Any snapshot = 2;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const PROTOBUF_NAMESPACE_ID::Any& snapshot() const;
  PROTOBUF_NAMESPACE_ID::Any* release_snapshot();
  PROTOBUF_NAMESPACE_ID::Any* mutable_snapshot();
  void set_allocated_snapshot(PROTOBUF_NAMESPACE_ID::Any* snapshot);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_snapshot() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_snapshot();
  public:

  // int64 snapshot_sequence = 1;
  void clear_snapshot_sequence();
  ::PROTOBUF_NAMESPACE_ID::int64 snapshot_sequence() const;
  void set_snapshot_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_snapshot_sequence() const;
  void _internal_set_snapshot_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.eventsourced.EventSourcedSnapshot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* snapshot_;
  ::PROTOBUF_NAMESPACE_ID::int64 snapshot_sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fevent_5fsourced_2eproto;
};
// -------------------------------------------------------------------

class EventSourcedEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.eventsourced.EventSourcedEvent) */ {
 public:
  EventSourcedEvent();
  virtual ~EventSourcedEvent();

  EventSourcedEvent(const EventSourcedEvent& from);
  EventSourcedEvent(EventSourcedEvent&& from) noexcept
    : EventSourcedEvent() {
    *this = ::std::move(from);
  }

  inline EventSourcedEvent& operator=(const EventSourcedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSourcedEvent& operator=(EventSourcedEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventSourcedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSourcedEvent* internal_default_instance() {
    return reinterpret_cast<const EventSourcedEvent*>(
               &_EventSourcedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventSourcedEvent& a, EventSourcedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSourcedEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventSourcedEvent* New() const final {
    return CreateMaybeMessage<EventSourcedEvent>(nullptr);
  }

  EventSourcedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventSourcedEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventSourcedEvent& from);
  void MergeFrom(const EventSourcedEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSourcedEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.eventsourced.EventSourcedEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kSequenceFieldNumber = 1,
  };
  // .google.protobuf.Any payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const PROTOBUF_NAMESPACE_ID::Any& payload() const;
  PROTOBUF_NAMESPACE_ID::Any* release_payload();
  PROTOBUF_NAMESPACE_ID::Any* mutable_payload();
  void set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_payload() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_payload();
  public:

  // int64 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.eventsourced.EventSourcedEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* payload_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fevent_5fsourced_2eproto;
};
// -------------------------------------------------------------------

class EventSourcedReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.eventsourced.EventSourcedReply) */ {
 public:
  EventSourcedReply();
  virtual ~EventSourcedReply();

  EventSourcedReply(const EventSourcedReply& from);
  EventSourcedReply(EventSourcedReply&& from) noexcept
    : EventSourcedReply() {
    *this = ::std::move(from);
  }

  inline EventSourcedReply& operator=(const EventSourcedReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSourcedReply& operator=(EventSourcedReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventSourcedReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSourcedReply* internal_default_instance() {
    return reinterpret_cast<const EventSourcedReply*>(
               &_EventSourcedReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventSourcedReply& a, EventSourcedReply& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSourcedReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventSourcedReply* New() const final {
    return CreateMaybeMessage<EventSourcedReply>(nullptr);
  }

  EventSourcedReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventSourcedReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventSourcedReply& from);
  void MergeFrom(const EventSourcedReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSourcedReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.eventsourced.EventSourcedReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSideEffectsFieldNumber = 3,
    kEventsFieldNumber = 4,
    kClientActionFieldNumber = 2,
    kSnapshotFieldNumber = 5,
    kCommandIdFieldNumber = 1,
  };
  // repeated .cloudstate.SideEffect side_effects = 3;
  int side_effects_size() const;
  private:
  int _internal_side_effects_size() const;
  public:
  void clear_side_effects();
  ::cloudstate::SideEffect* mutable_side_effects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloudstate::SideEffect >*
      mutable_side_effects();
  private:
  const ::cloudstate::SideEffect& _internal_side_effects(int index) const;
  ::cloudstate::SideEffect* _internal_add_side_effects();
  public:
  const ::cloudstate::SideEffect& side_effects(int index) const;
  ::cloudstate::SideEffect* add_side_effects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloudstate::SideEffect >&
      side_effects() const;

  // repeated .google.protobuf.Any events = 4;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  PROTOBUF_NAMESPACE_ID::Any* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_events();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_events(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_events();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& events(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      events() const;

  // .cloudstate.ClientAction client_action = 2;
  bool has_client_action() const;
  private:
  bool _internal_has_client_action() const;
  public:
  void clear_client_action();
  const ::cloudstate::ClientAction& client_action() const;
  ::cloudstate::ClientAction* release_client_action();
  ::cloudstate::ClientAction* mutable_client_action();
  void set_allocated_client_action(::cloudstate::ClientAction* client_action);
  private:
  const ::cloudstate::ClientAction& _internal_client_action() const;
  ::cloudstate::ClientAction* _internal_mutable_client_action();
  public:

  // .google.protobuf.Any snapshot = 5;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const PROTOBUF_NAMESPACE_ID::Any& snapshot() const;
  PROTOBUF_NAMESPACE_ID::Any* release_snapshot();
  PROTOBUF_NAMESPACE_ID::Any* mutable_snapshot();
  void set_allocated_snapshot(PROTOBUF_NAMESPACE_ID::Any* snapshot);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_snapshot() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_snapshot();
  public:

  // int64 command_id = 1;
  void clear_command_id();
  ::PROTOBUF_NAMESPACE_ID::int64 command_id() const;
  void set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_command_id() const;
  void _internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.eventsourced.EventSourcedReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloudstate::SideEffect > side_effects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > events_;
  ::cloudstate::ClientAction* client_action_;
  PROTOBUF_NAMESPACE_ID::Any* snapshot_;
  ::PROTOBUF_NAMESPACE_ID::int64 command_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fevent_5fsourced_2eproto;
};
// -------------------------------------------------------------------

class EventSourcedStreamIn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.eventsourced.EventSourcedStreamIn) */ {
 public:
  EventSourcedStreamIn();
  virtual ~EventSourcedStreamIn();

  EventSourcedStreamIn(const EventSourcedStreamIn& from);
  EventSourcedStreamIn(EventSourcedStreamIn&& from) noexcept
    : EventSourcedStreamIn() {
    *this = ::std::move(from);
  }

  inline EventSourcedStreamIn& operator=(const EventSourcedStreamIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSourcedStreamIn& operator=(EventSourcedStreamIn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventSourcedStreamIn& default_instance();

  enum MessageCase {
    kInit = 1,
    kEvent = 2,
    kCommand = 3,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSourcedStreamIn* internal_default_instance() {
    return reinterpret_cast<const EventSourcedStreamIn*>(
               &_EventSourcedStreamIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EventSourcedStreamIn& a, EventSourcedStreamIn& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSourcedStreamIn* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventSourcedStreamIn* New() const final {
    return CreateMaybeMessage<EventSourcedStreamIn>(nullptr);
  }

  EventSourcedStreamIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventSourcedStreamIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventSourcedStreamIn& from);
  void MergeFrom(const EventSourcedStreamIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSourcedStreamIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.eventsourced.EventSourcedStreamIn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitFieldNumber = 1,
    kEventFieldNumber = 2,
    kCommandFieldNumber = 3,
  };
  // .cloudstate.eventsourced.EventSourcedInit init = 1;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  const ::cloudstate::eventsourced::EventSourcedInit& init() const;
  ::cloudstate::eventsourced::EventSourcedInit* release_init();
  ::cloudstate::eventsourced::EventSourcedInit* mutable_init();
  void set_allocated_init(::cloudstate::eventsourced::EventSourcedInit* init);
  private:
  const ::cloudstate::eventsourced::EventSourcedInit& _internal_init() const;
  ::cloudstate::eventsourced::EventSourcedInit* _internal_mutable_init();
  public:

  // .cloudstate.eventsourced.EventSourcedEvent event = 2;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::cloudstate::eventsourced::EventSourcedEvent& event() const;
  ::cloudstate::eventsourced::EventSourcedEvent* release_event();
  ::cloudstate::eventsourced::EventSourcedEvent* mutable_event();
  void set_allocated_event(::cloudstate::eventsourced::EventSourcedEvent* event);
  private:
  const ::cloudstate::eventsourced::EventSourcedEvent& _internal_event() const;
  ::cloudstate::eventsourced::EventSourcedEvent* _internal_mutable_event();
  public:

  // .cloudstate.Command command = 3;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::cloudstate::Command& command() const;
  ::cloudstate::Command* release_command();
  ::cloudstate::Command* mutable_command();
  void set_allocated_command(::cloudstate::Command* command);
  private:
  const ::cloudstate::Command& _internal_command() const;
  ::cloudstate::Command* _internal_mutable_command();
  public:

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:cloudstate.eventsourced.EventSourcedStreamIn)
 private:
  class _Internal;
  void set_has_init();
  void set_has_event();
  void set_has_command();

  inline bool has_message() const;
  inline void clear_has_message();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union MessageUnion {
    MessageUnion() {}
    ::cloudstate::eventsourced::EventSourcedInit* init_;
    ::cloudstate::eventsourced::EventSourcedEvent* event_;
    ::cloudstate::Command* command_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protocol_2fcloudstate_2fevent_5fsourced_2eproto;
};
// -------------------------------------------------------------------

class EventSourcedStreamOut :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.eventsourced.EventSourcedStreamOut) */ {
 public:
  EventSourcedStreamOut();
  virtual ~EventSourcedStreamOut();

  EventSourcedStreamOut(const EventSourcedStreamOut& from);
  EventSourcedStreamOut(EventSourcedStreamOut&& from) noexcept
    : EventSourcedStreamOut() {
    *this = ::std::move(from);
  }

  inline EventSourcedStreamOut& operator=(const EventSourcedStreamOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSourcedStreamOut& operator=(EventSourcedStreamOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventSourcedStreamOut& default_instance();

  enum MessageCase {
    kReply = 1,
    kFailure = 2,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventSourcedStreamOut* internal_default_instance() {
    return reinterpret_cast<const EventSourcedStreamOut*>(
               &_EventSourcedStreamOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EventSourcedStreamOut& a, EventSourcedStreamOut& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSourcedStreamOut* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventSourcedStreamOut* New() const final {
    return CreateMaybeMessage<EventSourcedStreamOut>(nullptr);
  }

  EventSourcedStreamOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventSourcedStreamOut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventSourcedStreamOut& from);
  void MergeFrom(const EventSourcedStreamOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSourcedStreamOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.eventsourced.EventSourcedStreamOut";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
    kFailureFieldNumber = 2,
  };
  // .cloudstate.eventsourced.EventSourcedReply reply = 1;
  bool has_reply() const;
  private:
  bool _internal_has_reply() const;
  public:
  void clear_reply();
  const ::cloudstate::eventsourced::EventSourcedReply& reply() const;
  ::cloudstate::eventsourced::EventSourcedReply* release_reply();
  ::cloudstate::eventsourced::EventSourcedReply* mutable_reply();
  void set_allocated_reply(::cloudstate::eventsourced::EventSourcedReply* reply);
  private:
  const ::cloudstate::eventsourced::EventSourcedReply& _internal_reply() const;
  ::cloudstate::eventsourced::EventSourcedReply* _internal_mutable_reply();
  public:

  // .cloudstate.Failure failure = 2;
  bool has_failure() const;
  private:
  bool _internal_has_failure() const;
  public:
  void clear_failure();
  const ::cloudstate::Failure& failure() const;
  ::cloudstate::Failure* release_failure();
  ::cloudstate::Failure* mutable_failure();
  void set_allocated_failure(::cloudstate::Failure* failure);
  private:
  const ::cloudstate::Failure& _internal_failure() const;
  ::cloudstate::Failure* _internal_mutable_failure();
  public:

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:cloudstate.eventsourced.EventSourcedStreamOut)
 private:
  class _Internal;
  void set_has_reply();
  void set_has_failure();

  inline bool has_message() const;
  inline void clear_has_message();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union MessageUnion {
    MessageUnion() {}
    ::cloudstate::eventsourced::EventSourcedReply* reply_;
    ::cloudstate::Failure* failure_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protocol_2fcloudstate_2fevent_5fsourced_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventSourcedInit

// string service_name = 1;
inline void EventSourcedInit::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventSourcedInit::service_name() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedInit.service_name)
  return _internal_service_name();
}
inline void EventSourcedInit::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:cloudstate.eventsourced.EventSourcedInit.service_name)
}
inline std::string* EventSourcedInit::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedInit.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& EventSourcedInit::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void EventSourcedInit::_internal_set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EventSourcedInit::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.eventsourced.EventSourcedInit.service_name)
}
inline void EventSourcedInit::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.eventsourced.EventSourcedInit.service_name)
}
inline void EventSourcedInit::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.eventsourced.EventSourcedInit.service_name)
}
inline std::string* EventSourcedInit::_internal_mutable_service_name() {
  
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventSourcedInit::release_service_name() {
  // @@protoc_insertion_point(field_release:cloudstate.eventsourced.EventSourcedInit.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventSourcedInit::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.eventsourced.EventSourcedInit.service_name)
}

// string entity_id = 2;
inline void EventSourcedInit::clear_entity_id() {
  entity_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventSourcedInit::entity_id() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedInit.entity_id)
  return _internal_entity_id();
}
inline void EventSourcedInit::set_entity_id(const std::string& value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:cloudstate.eventsourced.EventSourcedInit.entity_id)
}
inline std::string* EventSourcedInit::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedInit.entity_id)
  return _internal_mutable_entity_id();
}
inline const std::string& EventSourcedInit::_internal_entity_id() const {
  return entity_id_.GetNoArena();
}
inline void EventSourcedInit::_internal_set_entity_id(const std::string& value) {
  
  entity_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EventSourcedInit::set_entity_id(std::string&& value) {
  
  entity_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.eventsourced.EventSourcedInit.entity_id)
}
inline void EventSourcedInit::set_entity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.eventsourced.EventSourcedInit.entity_id)
}
inline void EventSourcedInit::set_entity_id(const char* value, size_t size) {
  
  entity_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.eventsourced.EventSourcedInit.entity_id)
}
inline std::string* EventSourcedInit::_internal_mutable_entity_id() {
  
  return entity_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventSourcedInit::release_entity_id() {
  // @@protoc_insertion_point(field_release:cloudstate.eventsourced.EventSourcedInit.entity_id)
  
  return entity_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventSourcedInit::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  entity_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_id);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.eventsourced.EventSourcedInit.entity_id)
}

// .cloudstate.eventsourced.EventSourcedSnapshot snapshot = 3;
inline bool EventSourcedInit::_internal_has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != nullptr;
}
inline bool EventSourcedInit::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void EventSourcedInit::clear_snapshot() {
  if (GetArenaNoVirtual() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
}
inline const ::cloudstate::eventsourced::EventSourcedSnapshot& EventSourcedInit::_internal_snapshot() const {
  const ::cloudstate::eventsourced::EventSourcedSnapshot* p = snapshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cloudstate::eventsourced::EventSourcedSnapshot*>(
      &::cloudstate::eventsourced::_EventSourcedSnapshot_default_instance_);
}
inline const ::cloudstate::eventsourced::EventSourcedSnapshot& EventSourcedInit::snapshot() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedInit.snapshot)
  return _internal_snapshot();
}
inline ::cloudstate::eventsourced::EventSourcedSnapshot* EventSourcedInit::release_snapshot() {
  // @@protoc_insertion_point(field_release:cloudstate.eventsourced.EventSourcedInit.snapshot)
  
  ::cloudstate::eventsourced::EventSourcedSnapshot* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline ::cloudstate::eventsourced::EventSourcedSnapshot* EventSourcedInit::_internal_mutable_snapshot() {
  
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::cloudstate::eventsourced::EventSourcedSnapshot>(GetArenaNoVirtual());
    snapshot_ = p;
  }
  return snapshot_;
}
inline ::cloudstate::eventsourced::EventSourcedSnapshot* EventSourcedInit::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedInit.snapshot)
  return _internal_mutable_snapshot();
}
inline void EventSourcedInit::set_allocated_snapshot(::cloudstate::eventsourced::EventSourcedSnapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete snapshot_;
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:cloudstate.eventsourced.EventSourcedInit.snapshot)
}

// -------------------------------------------------------------------

// EventSourcedSnapshot

// int64 snapshot_sequence = 1;
inline void EventSourcedSnapshot::clear_snapshot_sequence() {
  snapshot_sequence_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventSourcedSnapshot::_internal_snapshot_sequence() const {
  return snapshot_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventSourcedSnapshot::snapshot_sequence() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedSnapshot.snapshot_sequence)
  return _internal_snapshot_sequence();
}
inline void EventSourcedSnapshot::_internal_set_snapshot_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  snapshot_sequence_ = value;
}
inline void EventSourcedSnapshot::set_snapshot_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_snapshot_sequence(value);
  // @@protoc_insertion_point(field_set:cloudstate.eventsourced.EventSourcedSnapshot.snapshot_sequence)
}

// .google.protobuf.Any snapshot = 2;
inline bool EventSourcedSnapshot::_internal_has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != nullptr;
}
inline bool EventSourcedSnapshot::has_snapshot() const {
  return _internal_has_snapshot();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EventSourcedSnapshot::_internal_snapshot() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = snapshot_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EventSourcedSnapshot::snapshot() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedSnapshot.snapshot)
  return _internal_snapshot();
}
inline PROTOBUF_NAMESPACE_ID::Any* EventSourcedSnapshot::release_snapshot() {
  // @@protoc_insertion_point(field_release:cloudstate.eventsourced.EventSourcedSnapshot.snapshot)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EventSourcedSnapshot::_internal_mutable_snapshot() {
  
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    snapshot_ = p;
  }
  return snapshot_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EventSourcedSnapshot::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedSnapshot.snapshot)
  return _internal_mutable_snapshot();
}
inline void EventSourcedSnapshot::set_allocated_snapshot(PROTOBUF_NAMESPACE_ID::Any* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(snapshot_);
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:cloudstate.eventsourced.EventSourcedSnapshot.snapshot)
}

// -------------------------------------------------------------------

// EventSourcedEvent

// int64 sequence = 1;
inline void EventSourcedEvent::clear_sequence() {
  sequence_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventSourcedEvent::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventSourcedEvent::sequence() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedEvent.sequence)
  return _internal_sequence();
}
inline void EventSourcedEvent::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_ = value;
}
inline void EventSourcedEvent::set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:cloudstate.eventsourced.EventSourcedEvent.sequence)
}

// .google.protobuf.Any payload = 2;
inline bool EventSourcedEvent::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool EventSourcedEvent::has_payload() const {
  return _internal_has_payload();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EventSourcedEvent::_internal_payload() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = payload_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EventSourcedEvent::payload() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedEvent.payload)
  return _internal_payload();
}
inline PROTOBUF_NAMESPACE_ID::Any* EventSourcedEvent::release_payload() {
  // @@protoc_insertion_point(field_release:cloudstate.eventsourced.EventSourcedEvent.payload)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EventSourcedEvent::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    payload_ = p;
  }
  return payload_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EventSourcedEvent::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedEvent.payload)
  return _internal_mutable_payload();
}
inline void EventSourcedEvent::set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:cloudstate.eventsourced.EventSourcedEvent.payload)
}

// -------------------------------------------------------------------

// EventSourcedReply

// int64 command_id = 1;
inline void EventSourcedReply::clear_command_id() {
  command_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventSourcedReply::_internal_command_id() const {
  return command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventSourcedReply::command_id() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedReply.command_id)
  return _internal_command_id();
}
inline void EventSourcedReply::_internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  command_id_ = value;
}
inline void EventSourcedReply::set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:cloudstate.eventsourced.EventSourcedReply.command_id)
}

// .cloudstate.ClientAction client_action = 2;
inline bool EventSourcedReply::_internal_has_client_action() const {
  return this != internal_default_instance() && client_action_ != nullptr;
}
inline bool EventSourcedReply::has_client_action() const {
  return _internal_has_client_action();
}
inline const ::cloudstate::ClientAction& EventSourcedReply::_internal_client_action() const {
  const ::cloudstate::ClientAction* p = client_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cloudstate::ClientAction*>(
      &::cloudstate::_ClientAction_default_instance_);
}
inline const ::cloudstate::ClientAction& EventSourcedReply::client_action() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedReply.client_action)
  return _internal_client_action();
}
inline ::cloudstate::ClientAction* EventSourcedReply::release_client_action() {
  // @@protoc_insertion_point(field_release:cloudstate.eventsourced.EventSourcedReply.client_action)
  
  ::cloudstate::ClientAction* temp = client_action_;
  client_action_ = nullptr;
  return temp;
}
inline ::cloudstate::ClientAction* EventSourcedReply::_internal_mutable_client_action() {
  
  if (client_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::cloudstate::ClientAction>(GetArenaNoVirtual());
    client_action_ = p;
  }
  return client_action_;
}
inline ::cloudstate::ClientAction* EventSourcedReply::mutable_client_action() {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedReply.client_action)
  return _internal_mutable_client_action();
}
inline void EventSourcedReply::set_allocated_client_action(::cloudstate::ClientAction* client_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_action_);
  }
  if (client_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_action, submessage_arena);
    }
    
  } else {
    
  }
  client_action_ = client_action;
  // @@protoc_insertion_point(field_set_allocated:cloudstate.eventsourced.EventSourcedReply.client_action)
}

// repeated .cloudstate.SideEffect side_effects = 3;
inline int EventSourcedReply::_internal_side_effects_size() const {
  return side_effects_.size();
}
inline int EventSourcedReply::side_effects_size() const {
  return _internal_side_effects_size();
}
inline ::cloudstate::SideEffect* EventSourcedReply::mutable_side_effects(int index) {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedReply.side_effects)
  return side_effects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloudstate::SideEffect >*
EventSourcedReply::mutable_side_effects() {
  // @@protoc_insertion_point(field_mutable_list:cloudstate.eventsourced.EventSourcedReply.side_effects)
  return &side_effects_;
}
inline const ::cloudstate::SideEffect& EventSourcedReply::_internal_side_effects(int index) const {
  return side_effects_.Get(index);
}
inline const ::cloudstate::SideEffect& EventSourcedReply::side_effects(int index) const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedReply.side_effects)
  return _internal_side_effects(index);
}
inline ::cloudstate::SideEffect* EventSourcedReply::_internal_add_side_effects() {
  return side_effects_.Add();
}
inline ::cloudstate::SideEffect* EventSourcedReply::add_side_effects() {
  // @@protoc_insertion_point(field_add:cloudstate.eventsourced.EventSourcedReply.side_effects)
  return _internal_add_side_effects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloudstate::SideEffect >&
EventSourcedReply::side_effects() const {
  // @@protoc_insertion_point(field_list:cloudstate.eventsourced.EventSourcedReply.side_effects)
  return side_effects_;
}

// repeated .google.protobuf.Any events = 4;
inline int EventSourcedReply::_internal_events_size() const {
  return events_.size();
}
inline int EventSourcedReply::events_size() const {
  return _internal_events_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* EventSourcedReply::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedReply.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
EventSourcedReply::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cloudstate.eventsourced.EventSourcedReply.events)
  return &events_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& EventSourcedReply::_internal_events(int index) const {
  return events_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EventSourcedReply::events(int index) const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedReply.events)
  return _internal_events(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* EventSourcedReply::_internal_add_events() {
  return events_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* EventSourcedReply::add_events() {
  // @@protoc_insertion_point(field_add:cloudstate.eventsourced.EventSourcedReply.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
EventSourcedReply::events() const {
  // @@protoc_insertion_point(field_list:cloudstate.eventsourced.EventSourcedReply.events)
  return events_;
}

// .google.protobuf.Any snapshot = 5;
inline bool EventSourcedReply::_internal_has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != nullptr;
}
inline bool EventSourcedReply::has_snapshot() const {
  return _internal_has_snapshot();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EventSourcedReply::_internal_snapshot() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = snapshot_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EventSourcedReply::snapshot() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedReply.snapshot)
  return _internal_snapshot();
}
inline PROTOBUF_NAMESPACE_ID::Any* EventSourcedReply::release_snapshot() {
  // @@protoc_insertion_point(field_release:cloudstate.eventsourced.EventSourcedReply.snapshot)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EventSourcedReply::_internal_mutable_snapshot() {
  
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    snapshot_ = p;
  }
  return snapshot_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EventSourcedReply::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedReply.snapshot)
  return _internal_mutable_snapshot();
}
inline void EventSourcedReply::set_allocated_snapshot(PROTOBUF_NAMESPACE_ID::Any* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(snapshot_);
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:cloudstate.eventsourced.EventSourcedReply.snapshot)
}

// -------------------------------------------------------------------

// EventSourcedStreamIn

// .cloudstate.eventsourced.EventSourcedInit init = 1;
inline bool EventSourcedStreamIn::_internal_has_init() const {
  return message_case() == kInit;
}
inline bool EventSourcedStreamIn::has_init() const {
  return _internal_has_init();
}
inline void EventSourcedStreamIn::set_has_init() {
  _oneof_case_[0] = kInit;
}
inline void EventSourcedStreamIn::clear_init() {
  if (_internal_has_init()) {
    delete message_.init_;
    clear_has_message();
  }
}
inline ::cloudstate::eventsourced::EventSourcedInit* EventSourcedStreamIn::release_init() {
  // @@protoc_insertion_point(field_release:cloudstate.eventsourced.EventSourcedStreamIn.init)
  if (_internal_has_init()) {
    clear_has_message();
      ::cloudstate::eventsourced::EventSourcedInit* temp = message_.init_;
    message_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cloudstate::eventsourced::EventSourcedInit& EventSourcedStreamIn::_internal_init() const {
  return _internal_has_init()
      ? *message_.init_
      : *reinterpret_cast< ::cloudstate::eventsourced::EventSourcedInit*>(&::cloudstate::eventsourced::_EventSourcedInit_default_instance_);
}
inline const ::cloudstate::eventsourced::EventSourcedInit& EventSourcedStreamIn::init() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedStreamIn.init)
  return _internal_init();
}
inline ::cloudstate::eventsourced::EventSourcedInit* EventSourcedStreamIn::_internal_mutable_init() {
  if (!_internal_has_init()) {
    clear_message();
    set_has_init();
    message_.init_ = CreateMaybeMessage< ::cloudstate::eventsourced::EventSourcedInit >(
        GetArenaNoVirtual());
  }
  return message_.init_;
}
inline ::cloudstate::eventsourced::EventSourcedInit* EventSourcedStreamIn::mutable_init() {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedStreamIn.init)
  return _internal_mutable_init();
}

// .cloudstate.eventsourced.EventSourcedEvent event = 2;
inline bool EventSourcedStreamIn::_internal_has_event() const {
  return message_case() == kEvent;
}
inline bool EventSourcedStreamIn::has_event() const {
  return _internal_has_event();
}
inline void EventSourcedStreamIn::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline void EventSourcedStreamIn::clear_event() {
  if (_internal_has_event()) {
    delete message_.event_;
    clear_has_message();
  }
}
inline ::cloudstate::eventsourced::EventSourcedEvent* EventSourcedStreamIn::release_event() {
  // @@protoc_insertion_point(field_release:cloudstate.eventsourced.EventSourcedStreamIn.event)
  if (_internal_has_event()) {
    clear_has_message();
      ::cloudstate::eventsourced::EventSourcedEvent* temp = message_.event_;
    message_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cloudstate::eventsourced::EventSourcedEvent& EventSourcedStreamIn::_internal_event() const {
  return _internal_has_event()
      ? *message_.event_
      : *reinterpret_cast< ::cloudstate::eventsourced::EventSourcedEvent*>(&::cloudstate::eventsourced::_EventSourcedEvent_default_instance_);
}
inline const ::cloudstate::eventsourced::EventSourcedEvent& EventSourcedStreamIn::event() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedStreamIn.event)
  return _internal_event();
}
inline ::cloudstate::eventsourced::EventSourcedEvent* EventSourcedStreamIn::_internal_mutable_event() {
  if (!_internal_has_event()) {
    clear_message();
    set_has_event();
    message_.event_ = CreateMaybeMessage< ::cloudstate::eventsourced::EventSourcedEvent >(
        GetArenaNoVirtual());
  }
  return message_.event_;
}
inline ::cloudstate::eventsourced::EventSourcedEvent* EventSourcedStreamIn::mutable_event() {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedStreamIn.event)
  return _internal_mutable_event();
}

// .cloudstate.Command command = 3;
inline bool EventSourcedStreamIn::_internal_has_command() const {
  return message_case() == kCommand;
}
inline bool EventSourcedStreamIn::has_command() const {
  return _internal_has_command();
}
inline void EventSourcedStreamIn::set_has_command() {
  _oneof_case_[0] = kCommand;
}
inline ::cloudstate::Command* EventSourcedStreamIn::release_command() {
  // @@protoc_insertion_point(field_release:cloudstate.eventsourced.EventSourcedStreamIn.command)
  if (_internal_has_command()) {
    clear_has_message();
      ::cloudstate::Command* temp = message_.command_;
    message_.command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cloudstate::Command& EventSourcedStreamIn::_internal_command() const {
  return _internal_has_command()
      ? *message_.command_
      : *reinterpret_cast< ::cloudstate::Command*>(&::cloudstate::_Command_default_instance_);
}
inline const ::cloudstate::Command& EventSourcedStreamIn::command() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedStreamIn.command)
  return _internal_command();
}
inline ::cloudstate::Command* EventSourcedStreamIn::_internal_mutable_command() {
  if (!_internal_has_command()) {
    clear_message();
    set_has_command();
    message_.command_ = CreateMaybeMessage< ::cloudstate::Command >(
        GetArenaNoVirtual());
  }
  return message_.command_;
}
inline ::cloudstate::Command* EventSourcedStreamIn::mutable_command() {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedStreamIn.command)
  return _internal_mutable_command();
}

inline bool EventSourcedStreamIn::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void EventSourcedStreamIn::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline EventSourcedStreamIn::MessageCase EventSourcedStreamIn::message_case() const {
  return EventSourcedStreamIn::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EventSourcedStreamOut

// .cloudstate.eventsourced.EventSourcedReply reply = 1;
inline bool EventSourcedStreamOut::_internal_has_reply() const {
  return message_case() == kReply;
}
inline bool EventSourcedStreamOut::has_reply() const {
  return _internal_has_reply();
}
inline void EventSourcedStreamOut::set_has_reply() {
  _oneof_case_[0] = kReply;
}
inline void EventSourcedStreamOut::clear_reply() {
  if (_internal_has_reply()) {
    delete message_.reply_;
    clear_has_message();
  }
}
inline ::cloudstate::eventsourced::EventSourcedReply* EventSourcedStreamOut::release_reply() {
  // @@protoc_insertion_point(field_release:cloudstate.eventsourced.EventSourcedStreamOut.reply)
  if (_internal_has_reply()) {
    clear_has_message();
      ::cloudstate::eventsourced::EventSourcedReply* temp = message_.reply_;
    message_.reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cloudstate::eventsourced::EventSourcedReply& EventSourcedStreamOut::_internal_reply() const {
  return _internal_has_reply()
      ? *message_.reply_
      : *reinterpret_cast< ::cloudstate::eventsourced::EventSourcedReply*>(&::cloudstate::eventsourced::_EventSourcedReply_default_instance_);
}
inline const ::cloudstate::eventsourced::EventSourcedReply& EventSourcedStreamOut::reply() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedStreamOut.reply)
  return _internal_reply();
}
inline ::cloudstate::eventsourced::EventSourcedReply* EventSourcedStreamOut::_internal_mutable_reply() {
  if (!_internal_has_reply()) {
    clear_message();
    set_has_reply();
    message_.reply_ = CreateMaybeMessage< ::cloudstate::eventsourced::EventSourcedReply >(
        GetArenaNoVirtual());
  }
  return message_.reply_;
}
inline ::cloudstate::eventsourced::EventSourcedReply* EventSourcedStreamOut::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedStreamOut.reply)
  return _internal_mutable_reply();
}

// .cloudstate.Failure failure = 2;
inline bool EventSourcedStreamOut::_internal_has_failure() const {
  return message_case() == kFailure;
}
inline bool EventSourcedStreamOut::has_failure() const {
  return _internal_has_failure();
}
inline void EventSourcedStreamOut::set_has_failure() {
  _oneof_case_[0] = kFailure;
}
inline ::cloudstate::Failure* EventSourcedStreamOut::release_failure() {
  // @@protoc_insertion_point(field_release:cloudstate.eventsourced.EventSourcedStreamOut.failure)
  if (_internal_has_failure()) {
    clear_has_message();
      ::cloudstate::Failure* temp = message_.failure_;
    message_.failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cloudstate::Failure& EventSourcedStreamOut::_internal_failure() const {
  return _internal_has_failure()
      ? *message_.failure_
      : *reinterpret_cast< ::cloudstate::Failure*>(&::cloudstate::_Failure_default_instance_);
}
inline const ::cloudstate::Failure& EventSourcedStreamOut::failure() const {
  // @@protoc_insertion_point(field_get:cloudstate.eventsourced.EventSourcedStreamOut.failure)
  return _internal_failure();
}
inline ::cloudstate::Failure* EventSourcedStreamOut::_internal_mutable_failure() {
  if (!_internal_has_failure()) {
    clear_message();
    set_has_failure();
    message_.failure_ = CreateMaybeMessage< ::cloudstate::Failure >(
        GetArenaNoVirtual());
  }
  return message_.failure_;
}
inline ::cloudstate::Failure* EventSourcedStreamOut::mutable_failure() {
  // @@protoc_insertion_point(field_mutable:cloudstate.eventsourced.EventSourcedStreamOut.failure)
  return _internal_mutable_failure();
}

inline bool EventSourcedStreamOut::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void EventSourcedStreamOut::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline EventSourcedStreamOut::MessageCase EventSourcedStreamOut::message_case() const {
  return EventSourcedStreamOut::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eventsourced
}  // namespace cloudstate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2fcloudstate_2fevent_5fsourced_2eproto
