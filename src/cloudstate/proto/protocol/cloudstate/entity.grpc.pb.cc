// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protocol/cloudstate/entity.proto

#include "protocol/cloudstate/entity.pb.h"
#include "protocol/cloudstate/entity.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace cloudstate {

static const char* EntityDiscovery_method_names[] = {
  "/cloudstate.EntityDiscovery/discover",
  "/cloudstate.EntityDiscovery/reportError",
};

std::unique_ptr< EntityDiscovery::Stub> EntityDiscovery::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EntityDiscovery::Stub> stub(new EntityDiscovery::Stub(channel));
  return stub;
}

EntityDiscovery::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_discover_(EntityDiscovery_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_reportError_(EntityDiscovery_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EntityDiscovery::Stub::discover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::cloudstate::EntitySpec* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_discover_, context, request, response);
}

void EntityDiscovery::Stub::experimental_async::discover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo* request, ::cloudstate::EntitySpec* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_discover_, context, request, response, std::move(f));
}

void EntityDiscovery::Stub::experimental_async::discover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::EntitySpec* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_discover_, context, request, response, std::move(f));
}

void EntityDiscovery::Stub::experimental_async::discover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo* request, ::cloudstate::EntitySpec* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_discover_, context, request, response, reactor);
}

void EntityDiscovery::Stub::experimental_async::discover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::EntitySpec* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_discover_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudstate::EntitySpec>* EntityDiscovery::Stub::AsyncdiscoverRaw(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::cloudstate::EntitySpec>::Create(channel_.get(), cq, rpcmethod_discover_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cloudstate::EntitySpec>* EntityDiscovery::Stub::PrepareAsyncdiscoverRaw(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::cloudstate::EntitySpec>::Create(channel_.get(), cq, rpcmethod_discover_, context, request, false);
}

::grpc::Status EntityDiscovery::Stub::reportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_reportError_, context, request, response);
}

void EntityDiscovery::Stub::experimental_async::reportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_reportError_, context, request, response, std::move(f));
}

void EntityDiscovery::Stub::experimental_async::reportError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_reportError_, context, request, response, std::move(f));
}

void EntityDiscovery::Stub::experimental_async::reportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_reportError_, context, request, response, reactor);
}

void EntityDiscovery::Stub::experimental_async::reportError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_reportError_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EntityDiscovery::Stub::AsyncreportErrorRaw(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_reportError_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EntityDiscovery::Stub::PrepareAsyncreportErrorRaw(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_reportError_, context, request, false);
}

EntityDiscovery::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EntityDiscovery_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EntityDiscovery::Service, ::cloudstate::ProxyInfo, ::cloudstate::EntitySpec>(
          std::mem_fn(&EntityDiscovery::Service::discover), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EntityDiscovery_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EntityDiscovery::Service, ::cloudstate::UserFunctionError, ::google::protobuf::Empty>(
          std::mem_fn(&EntityDiscovery::Service::reportError), this)));
}

EntityDiscovery::Service::~Service() {
}

::grpc::Status EntityDiscovery::Service::discover(::grpc::ServerContext* context, const ::cloudstate::ProxyInfo* request, ::cloudstate::EntitySpec* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EntityDiscovery::Service::reportError(::grpc::ServerContext* context, const ::cloudstate::UserFunctionError* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cloudstate

