// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protocol/cloudstate/function.proto
// Original file comments:
// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// gRPC interface for Stateless Entity user functions.
//
#ifndef GRPC_protocol_2fcloudstate_2ffunction_2eproto__INCLUDED
#define GRPC_protocol_2fcloudstate_2ffunction_2eproto__INCLUDED

#include "protocol/cloudstate/function.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace cloudstate {
namespace function {

class StatelessFunction final {
 public:
  static constexpr char const* service_full_name() {
    return "cloudstate.function.StatelessFunction";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status handleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::cloudstate::function::FunctionReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudstate::function::FunctionReply>> AsynchandleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudstate::function::FunctionReply>>(AsynchandleUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudstate::function::FunctionReply>> PrepareAsynchandleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudstate::function::FunctionReply>>(PrepareAsynchandleUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::cloudstate::function::FunctionCommand>> handleStreamedIn(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::cloudstate::function::FunctionCommand>>(handleStreamedInRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::cloudstate::function::FunctionCommand>> AsynchandleStreamedIn(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::cloudstate::function::FunctionCommand>>(AsynchandleStreamedInRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::cloudstate::function::FunctionCommand>> PrepareAsynchandleStreamedIn(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::cloudstate::function::FunctionCommand>>(PrepareAsynchandleStreamedInRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::cloudstate::function::FunctionReply>> handleStreamedOut(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::cloudstate::function::FunctionReply>>(handleStreamedOutRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cloudstate::function::FunctionReply>> AsynchandleStreamedOut(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cloudstate::function::FunctionReply>>(AsynchandleStreamedOutRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cloudstate::function::FunctionReply>> PrepareAsynchandleStreamedOut(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cloudstate::function::FunctionReply>>(PrepareAsynchandleStreamedOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>> handleStreamed(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>>(handleStreamedRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>> AsynchandleStreamed(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>>(AsynchandleStreamedRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>> PrepareAsynchandleStreamed(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>>(PrepareAsynchandleStreamedRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void handleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand* request, ::cloudstate::function::FunctionReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void handleUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::function::FunctionReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void handleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand* request, ::cloudstate::function::FunctionReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void handleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand* request, ::cloudstate::function::FunctionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void handleUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::function::FunctionReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void handleUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::function::FunctionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void handleStreamedIn(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::ClientWriteReactor< ::cloudstate::function::FunctionCommand>* reactor) = 0;
      #else
      virtual void handleStreamedIn(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::experimental::ClientWriteReactor< ::cloudstate::function::FunctionCommand>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void handleStreamedOut(::grpc::ClientContext* context, ::cloudstate::function::FunctionCommand* request, ::grpc::ClientReadReactor< ::cloudstate::function::FunctionReply>* reactor) = 0;
      #else
      virtual void handleStreamedOut(::grpc::ClientContext* context, ::cloudstate::function::FunctionCommand* request, ::grpc::experimental::ClientReadReactor< ::cloudstate::function::FunctionReply>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void handleStreamed(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::cloudstate::function::FunctionCommand,::cloudstate::function::FunctionReply>* reactor) = 0;
      #else
      virtual void handleStreamed(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::cloudstate::function::FunctionCommand,::cloudstate::function::FunctionReply>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudstate::function::FunctionReply>* AsynchandleUnaryRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudstate::function::FunctionReply>* PrepareAsynchandleUnaryRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::cloudstate::function::FunctionCommand>* handleStreamedInRaw(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::cloudstate::function::FunctionCommand>* AsynchandleStreamedInRaw(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::cloudstate::function::FunctionCommand>* PrepareAsynchandleStreamedInRaw(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::cloudstate::function::FunctionReply>* handleStreamedOutRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cloudstate::function::FunctionReply>* AsynchandleStreamedOutRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cloudstate::function::FunctionReply>* PrepareAsynchandleStreamedOutRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>* handleStreamedRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>* AsynchandleStreamedRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>* PrepareAsynchandleStreamedRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status handleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::cloudstate::function::FunctionReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudstate::function::FunctionReply>> AsynchandleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudstate::function::FunctionReply>>(AsynchandleUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudstate::function::FunctionReply>> PrepareAsynchandleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudstate::function::FunctionReply>>(PrepareAsynchandleUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::cloudstate::function::FunctionCommand>> handleStreamedIn(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::cloudstate::function::FunctionCommand>>(handleStreamedInRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::cloudstate::function::FunctionCommand>> AsynchandleStreamedIn(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::cloudstate::function::FunctionCommand>>(AsynchandleStreamedInRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::cloudstate::function::FunctionCommand>> PrepareAsynchandleStreamedIn(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::cloudstate::function::FunctionCommand>>(PrepareAsynchandleStreamedInRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::cloudstate::function::FunctionReply>> handleStreamedOut(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::cloudstate::function::FunctionReply>>(handleStreamedOutRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cloudstate::function::FunctionReply>> AsynchandleStreamedOut(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cloudstate::function::FunctionReply>>(AsynchandleStreamedOutRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cloudstate::function::FunctionReply>> PrepareAsynchandleStreamedOut(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cloudstate::function::FunctionReply>>(PrepareAsynchandleStreamedOutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>> handleStreamed(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>>(handleStreamedRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>> AsynchandleStreamed(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>>(AsynchandleStreamedRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>> PrepareAsynchandleStreamed(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>>(PrepareAsynchandleStreamedRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void handleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand* request, ::cloudstate::function::FunctionReply* response, std::function<void(::grpc::Status)>) override;
      void handleUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::function::FunctionReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void handleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand* request, ::cloudstate::function::FunctionReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void handleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand* request, ::cloudstate::function::FunctionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void handleUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::function::FunctionReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void handleUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::function::FunctionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void handleStreamedIn(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::ClientWriteReactor< ::cloudstate::function::FunctionCommand>* reactor) override;
      #else
      void handleStreamedIn(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::experimental::ClientWriteReactor< ::cloudstate::function::FunctionCommand>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void handleStreamedOut(::grpc::ClientContext* context, ::cloudstate::function::FunctionCommand* request, ::grpc::ClientReadReactor< ::cloudstate::function::FunctionReply>* reactor) override;
      #else
      void handleStreamedOut(::grpc::ClientContext* context, ::cloudstate::function::FunctionCommand* request, ::grpc::experimental::ClientReadReactor< ::cloudstate::function::FunctionReply>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void handleStreamed(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::cloudstate::function::FunctionCommand,::cloudstate::function::FunctionReply>* reactor) override;
      #else
      void handleStreamed(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::cloudstate::function::FunctionCommand,::cloudstate::function::FunctionReply>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cloudstate::function::FunctionReply>* AsynchandleUnaryRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudstate::function::FunctionReply>* PrepareAsynchandleUnaryRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::cloudstate::function::FunctionCommand>* handleStreamedInRaw(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response) override;
    ::grpc::ClientAsyncWriter< ::cloudstate::function::FunctionCommand>* AsynchandleStreamedInRaw(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::cloudstate::function::FunctionCommand>* PrepareAsynchandleStreamedInRaw(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::cloudstate::function::FunctionReply>* handleStreamedOutRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request) override;
    ::grpc::ClientAsyncReader< ::cloudstate::function::FunctionReply>* AsynchandleStreamedOutRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::cloudstate::function::FunctionReply>* PrepareAsynchandleStreamedOutRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>* handleStreamedRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>* AsynchandleStreamedRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>* PrepareAsynchandleStreamedRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_handleUnary_;
    const ::grpc::internal::RpcMethod rpcmethod_handleStreamedIn_;
    const ::grpc::internal::RpcMethod rpcmethod_handleStreamedOut_;
    const ::grpc::internal::RpcMethod rpcmethod_handleStreamed_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status handleUnary(::grpc::ServerContext* context, const ::cloudstate::function::FunctionCommand* request, ::cloudstate::function::FunctionReply* response);
    virtual ::grpc::Status handleStreamedIn(::grpc::ServerContext* context, ::grpc::ServerReader< ::cloudstate::function::FunctionCommand>* reader, ::cloudstate::function::FunctionReply* response);
    virtual ::grpc::Status handleStreamedOut(::grpc::ServerContext* context, const ::cloudstate::function::FunctionCommand* request, ::grpc::ServerWriter< ::cloudstate::function::FunctionReply>* writer);
    virtual ::grpc::Status handleStreamed(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::cloudstate::function::FunctionReply, ::cloudstate::function::FunctionCommand>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_handleUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_handleUnary() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_handleUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleUnary(::grpc::ServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::cloudstate::function::FunctionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthandleUnary(::grpc::ServerContext* context, ::cloudstate::function::FunctionCommand* request, ::grpc::ServerAsyncResponseWriter< ::cloudstate::function::FunctionReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_handleStreamedIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_handleStreamedIn() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_handleStreamedIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamedIn(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::cloudstate::function::FunctionCommand>* /*reader*/, ::cloudstate::function::FunctionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthandleStreamedIn(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::cloudstate::function::FunctionReply, ::cloudstate::function::FunctionCommand>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_handleStreamedOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_handleStreamedOut() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_handleStreamedOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamedOut(::grpc::ServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::grpc::ServerWriter< ::cloudstate::function::FunctionReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthandleStreamedOut(::grpc::ServerContext* context, ::cloudstate::function::FunctionCommand* request, ::grpc::ServerAsyncWriter< ::cloudstate::function::FunctionReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_handleStreamed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_handleStreamed() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_handleStreamed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamed(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cloudstate::function::FunctionReply, ::cloudstate::function::FunctionCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthandleStreamed(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::cloudstate::function::FunctionReply, ::cloudstate::function::FunctionCommand>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_handleUnary<WithAsyncMethod_handleStreamedIn<WithAsyncMethod_handleStreamedOut<WithAsyncMethod_handleStreamed<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_handleUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_handleUnary() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudstate::function::FunctionCommand* request, ::cloudstate::function::FunctionReply* response) { return this->handleUnary(context, request, response); }));}
    void SetMessageAllocatorFor_handleUnary(
        ::grpc::experimental::MessageAllocator< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_handleUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleUnary(::grpc::ServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::cloudstate::function::FunctionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* handleUnary(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::cloudstate::function::FunctionReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* handleUnary(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::cloudstate::function::FunctionReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_handleStreamedIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_handleStreamedIn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::cloudstate::function::FunctionReply* response) { return this->handleStreamedIn(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_handleStreamedIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamedIn(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::cloudstate::function::FunctionCommand>* /*reader*/, ::cloudstate::function::FunctionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::cloudstate::function::FunctionCommand>* handleStreamedIn(
      ::grpc::CallbackServerContext* /*context*/, ::cloudstate::function::FunctionReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::cloudstate::function::FunctionCommand>* handleStreamedIn(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::cloudstate::function::FunctionReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_handleStreamedOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_handleStreamedOut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudstate::function::FunctionCommand* request) { return this->handleStreamedOut(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_handleStreamedOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamedOut(::grpc::ServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::grpc::ServerWriter< ::cloudstate::function::FunctionReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::cloudstate::function::FunctionReply>* handleStreamedOut(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::cloudstate::function::FunctionReply>* handleStreamedOut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_handleStreamed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_handleStreamed() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->handleStreamed(context); }));
    }
    ~ExperimentalWithCallbackMethod_handleStreamed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamed(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cloudstate::function::FunctionReply, ::cloudstate::function::FunctionCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>* handleStreamed(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>* handleStreamed(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_handleUnary<ExperimentalWithCallbackMethod_handleStreamedIn<ExperimentalWithCallbackMethod_handleStreamedOut<ExperimentalWithCallbackMethod_handleStreamed<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_handleUnary<ExperimentalWithCallbackMethod_handleStreamedIn<ExperimentalWithCallbackMethod_handleStreamedOut<ExperimentalWithCallbackMethod_handleStreamed<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_handleUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_handleUnary() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_handleUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleUnary(::grpc::ServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::cloudstate::function::FunctionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_handleStreamedIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_handleStreamedIn() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_handleStreamedIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamedIn(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::cloudstate::function::FunctionCommand>* /*reader*/, ::cloudstate::function::FunctionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_handleStreamedOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_handleStreamedOut() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_handleStreamedOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamedOut(::grpc::ServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::grpc::ServerWriter< ::cloudstate::function::FunctionReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_handleStreamed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_handleStreamed() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_handleStreamed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamed(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cloudstate::function::FunctionReply, ::cloudstate::function::FunctionCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_handleUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_handleUnary() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_handleUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleUnary(::grpc::ServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::cloudstate::function::FunctionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthandleUnary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_handleStreamedIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_handleStreamedIn() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_handleStreamedIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamedIn(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::cloudstate::function::FunctionCommand>* /*reader*/, ::cloudstate::function::FunctionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthandleStreamedIn(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_handleStreamedOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_handleStreamedOut() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_handleStreamedOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamedOut(::grpc::ServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::grpc::ServerWriter< ::cloudstate::function::FunctionReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthandleStreamedOut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_handleStreamed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_handleStreamed() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_handleStreamed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamed(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cloudstate::function::FunctionReply, ::cloudstate::function::FunctionCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthandleStreamed(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_handleUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_handleUnary() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->handleUnary(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_handleUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleUnary(::grpc::ServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::cloudstate::function::FunctionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* handleUnary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* handleUnary(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_handleStreamedIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_handleStreamedIn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->handleStreamedIn(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_handleStreamedIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamedIn(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::cloudstate::function::FunctionCommand>* /*reader*/, ::cloudstate::function::FunctionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* handleStreamedIn(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* handleStreamedIn(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_handleStreamedOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_handleStreamedOut() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->handleStreamedOut(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_handleStreamedOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamedOut(::grpc::ServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::grpc::ServerWriter< ::cloudstate::function::FunctionReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* handleStreamedOut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* handleStreamedOut(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_handleStreamed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_handleStreamed() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->handleStreamed(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_handleStreamed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handleStreamed(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cloudstate::function::FunctionReply, ::cloudstate::function::FunctionCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* handleStreamed(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* handleStreamed(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_handleUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_handleUnary() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>(std::bind(&WithStreamedUnaryMethod_handleUnary<BaseClass>::StreamedhandleUnary, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_handleUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status handleUnary(::grpc::ServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::cloudstate::function::FunctionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedhandleUnary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudstate::function::FunctionCommand,::cloudstate::function::FunctionReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_handleUnary<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_handleStreamedOut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_handleStreamedOut() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>(std::bind(&WithSplitStreamingMethod_handleStreamedOut<BaseClass>::StreamedhandleStreamedOut, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_handleStreamedOut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status handleStreamedOut(::grpc::ServerContext* /*context*/, const ::cloudstate::function::FunctionCommand* /*request*/, ::grpc::ServerWriter< ::cloudstate::function::FunctionReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedhandleStreamedOut(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::cloudstate::function::FunctionCommand,::cloudstate::function::FunctionReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_handleStreamedOut<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_handleUnary<WithSplitStreamingMethod_handleStreamedOut<Service > > StreamedService;
};

}  // namespace function
}  // namespace cloudstate


#endif  // GRPC_protocol_2fcloudstate_2ffunction_2eproto__INCLUDED
