// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/cloudstate/event_sourced.proto

#include "protocol/cloudstate/event_sourced.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cloudstate_2fentity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClientAction_cloudstate_2fentity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cloudstate_2fentity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Command_cloudstate_2fentity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cloudstate_2fentity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Failure_cloudstate_2fentity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cloudstate_2fentity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SideEffect_cloudstate_2fentity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcloudstate_2fevent_5fsourced_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventSourcedEvent_protocol_2fcloudstate_2fevent_5fsourced_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcloudstate_2fevent_5fsourced_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventSourcedInit_protocol_2fcloudstate_2fevent_5fsourced_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcloudstate_2fevent_5fsourced_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EventSourcedReply_protocol_2fcloudstate_2fevent_5fsourced_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcloudstate_2fevent_5fsourced_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventSourcedSnapshot_protocol_2fcloudstate_2fevent_5fsourced_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace cloudstate {
namespace eventsourced {
class EventSourcedInitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventSourcedInit> _instance;
} _EventSourcedInit_default_instance_;
class EventSourcedSnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventSourcedSnapshot> _instance;
} _EventSourcedSnapshot_default_instance_;
class EventSourcedEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventSourcedEvent> _instance;
} _EventSourcedEvent_default_instance_;
class EventSourcedReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventSourcedReply> _instance;
} _EventSourcedReply_default_instance_;
class EventSourcedStreamInDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventSourcedStreamIn> _instance;
  const ::cloudstate::eventsourced::EventSourcedInit* init_;
  const ::cloudstate::eventsourced::EventSourcedEvent* event_;
  const ::cloudstate::Command* command_;
} _EventSourcedStreamIn_default_instance_;
class EventSourcedStreamOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventSourcedStreamOut> _instance;
  const ::cloudstate::eventsourced::EventSourcedReply* reply_;
  const ::cloudstate::Failure* failure_;
} _EventSourcedStreamOut_default_instance_;
}  // namespace eventsourced
}  // namespace cloudstate
static void InitDefaultsscc_info_EventSourcedEvent_protocol_2fcloudstate_2fevent_5fsourced_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::eventsourced::_EventSourcedEvent_default_instance_;
    new (ptr) ::cloudstate::eventsourced::EventSourcedEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::eventsourced::EventSourcedEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventSourcedEvent_protocol_2fcloudstate_2fevent_5fsourced_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventSourcedEvent_protocol_2fcloudstate_2fevent_5fsourced_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_EventSourcedInit_protocol_2fcloudstate_2fevent_5fsourced_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::eventsourced::_EventSourcedInit_default_instance_;
    new (ptr) ::cloudstate::eventsourced::EventSourcedInit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::eventsourced::EventSourcedInit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventSourcedInit_protocol_2fcloudstate_2fevent_5fsourced_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventSourcedInit_protocol_2fcloudstate_2fevent_5fsourced_2eproto}, {
      &scc_info_EventSourcedSnapshot_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base,}};

static void InitDefaultsscc_info_EventSourcedReply_protocol_2fcloudstate_2fevent_5fsourced_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::eventsourced::_EventSourcedReply_default_instance_;
    new (ptr) ::cloudstate::eventsourced::EventSourcedReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::eventsourced::EventSourcedReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EventSourcedReply_protocol_2fcloudstate_2fevent_5fsourced_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_EventSourcedReply_protocol_2fcloudstate_2fevent_5fsourced_2eproto}, {
      &scc_info_ClientAction_cloudstate_2fentity_2eproto.base,
      &scc_info_SideEffect_cloudstate_2fentity_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_EventSourcedSnapshot_protocol_2fcloudstate_2fevent_5fsourced_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::eventsourced::_EventSourcedSnapshot_default_instance_;
    new (ptr) ::cloudstate::eventsourced::EventSourcedSnapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::eventsourced::EventSourcedSnapshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventSourcedSnapshot_protocol_2fcloudstate_2fevent_5fsourced_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventSourcedSnapshot_protocol_2fcloudstate_2fevent_5fsourced_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_EventSourcedStreamIn_protocol_2fcloudstate_2fevent_5fsourced_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::eventsourced::_EventSourcedStreamIn_default_instance_;
    new (ptr) ::cloudstate::eventsourced::EventSourcedStreamIn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::eventsourced::EventSourcedStreamIn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EventSourcedStreamIn_protocol_2fcloudstate_2fevent_5fsourced_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_EventSourcedStreamIn_protocol_2fcloudstate_2fevent_5fsourced_2eproto}, {
      &scc_info_EventSourcedInit_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base,
      &scc_info_EventSourcedEvent_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base,
      &scc_info_Command_cloudstate_2fentity_2eproto.base,}};

static void InitDefaultsscc_info_EventSourcedStreamOut_protocol_2fcloudstate_2fevent_5fsourced_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cloudstate::eventsourced::_EventSourcedStreamOut_default_instance_;
    new (ptr) ::cloudstate::eventsourced::EventSourcedStreamOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cloudstate::eventsourced::EventSourcedStreamOut::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventSourcedStreamOut_protocol_2fcloudstate_2fevent_5fsourced_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EventSourcedStreamOut_protocol_2fcloudstate_2fevent_5fsourced_2eproto}, {
      &scc_info_EventSourcedReply_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base,
      &scc_info_Failure_cloudstate_2fentity_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2fcloudstate_2fevent_5fsourced_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protocol_2fcloudstate_2fevent_5fsourced_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2fcloudstate_2fevent_5fsourced_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2fcloudstate_2fevent_5fsourced_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedInit, service_name_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedInit, entity_id_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedInit, snapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedSnapshot, snapshot_sequence_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedSnapshot, snapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedEvent, sequence_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedEvent, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedReply, command_id_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedReply, client_action_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedReply, side_effects_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedReply, events_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedReply, snapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedStreamIn, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedStreamIn, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::cloudstate::eventsourced::EventSourcedStreamInDefaultTypeInternal, init_),
  offsetof(::cloudstate::eventsourced::EventSourcedStreamInDefaultTypeInternal, event_),
  offsetof(::cloudstate::eventsourced::EventSourcedStreamInDefaultTypeInternal, command_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedStreamIn, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedStreamOut, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedStreamOut, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::cloudstate::eventsourced::EventSourcedStreamOutDefaultTypeInternal, reply_),
  offsetof(::cloudstate::eventsourced::EventSourcedStreamOutDefaultTypeInternal, failure_),
  PROTOBUF_FIELD_OFFSET(::cloudstate::eventsourced::EventSourcedStreamOut, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cloudstate::eventsourced::EventSourcedInit)},
  { 8, -1, sizeof(::cloudstate::eventsourced::EventSourcedSnapshot)},
  { 15, -1, sizeof(::cloudstate::eventsourced::EventSourcedEvent)},
  { 22, -1, sizeof(::cloudstate::eventsourced::EventSourcedReply)},
  { 32, -1, sizeof(::cloudstate::eventsourced::EventSourcedStreamIn)},
  { 41, -1, sizeof(::cloudstate::eventsourced::EventSourcedStreamOut)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::eventsourced::_EventSourcedInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::eventsourced::_EventSourcedSnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::eventsourced::_EventSourcedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::eventsourced::_EventSourcedReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::eventsourced::_EventSourcedStreamIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cloudstate::eventsourced::_EventSourcedStreamOut_default_instance_),
};

const char descriptor_table_protodef_protocol_2fcloudstate_2fevent_5fsourced_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'protocol/cloudstate/event_sourced.prot"
  "o\022\027cloudstate.eventsourced\032\031google/proto"
  "buf/any.proto\032\027cloudstate/entity.proto\"|"
  "\n\020EventSourcedInit\022\024\n\014service_name\030\001 \001(\t"
  "\022\021\n\tentity_id\030\002 \001(\t\022\?\n\010snapshot\030\003 \001(\0132-."
  "cloudstate.eventsourced.EventSourcedSnap"
  "shot\"Y\n\024EventSourcedSnapshot\022\031\n\021snapshot"
  "_sequence\030\001 \001(\003\022&\n\010snapshot\030\002 \001(\0132\024.goog"
  "le.protobuf.Any\"L\n\021EventSourcedEvent\022\020\n\010"
  "sequence\030\001 \001(\003\022%\n\007payload\030\002 \001(\0132\024.google"
  ".protobuf.Any\"\324\001\n\021EventSourcedReply\022\022\n\nc"
  "ommand_id\030\001 \001(\003\022/\n\rclient_action\030\002 \001(\0132\030"
  ".cloudstate.ClientAction\022,\n\014side_effects"
  "\030\003 \003(\0132\026.cloudstate.SideEffect\022$\n\006events"
  "\030\004 \003(\0132\024.google.protobuf.Any\022&\n\010snapshot"
  "\030\005 \001(\0132\024.google.protobuf.Any\"\301\001\n\024EventSo"
  "urcedStreamIn\0229\n\004init\030\001 \001(\0132).cloudstate"
  ".eventsourced.EventSourcedInitH\000\022;\n\005even"
  "t\030\002 \001(\0132*.cloudstate.eventsourced.EventS"
  "ourcedEventH\000\022&\n\007command\030\003 \001(\0132\023.cloudst"
  "ate.CommandH\000B\t\n\007message\"\207\001\n\025EventSource"
  "dStreamOut\022;\n\005reply\030\001 \001(\0132*.cloudstate.e"
  "ventsourced.EventSourcedReplyH\000\022&\n\007failu"
  "re\030\002 \001(\0132\023.cloudstate.FailureH\000B\t\n\007messa"
  "ge2}\n\014EventSourced\022m\n\006handle\022-.cloudstat"
  "e.eventsourced.EventSourcedStreamIn\032..cl"
  "oudstate.eventsourced.EventSourcedStream"
  "Out\"\000(\0010\001B-\n\026io.cloudstate.protocolZ\023clo"
  "udstate/protocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto_deps[2] = {
  &::descriptor_table_cloudstate_2fentity_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto_sccs[6] = {
  &scc_info_EventSourcedEvent_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base,
  &scc_info_EventSourcedInit_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base,
  &scc_info_EventSourcedReply_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base,
  &scc_info_EventSourcedSnapshot_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base,
  &scc_info_EventSourcedStreamIn_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base,
  &scc_info_EventSourcedStreamOut_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto_once;
static bool descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto = {
  &descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto_initialized, descriptor_table_protodef_protocol_2fcloudstate_2fevent_5fsourced_2eproto, "protocol/cloudstate/event_sourced.proto", 1144,
  &descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto_once, descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto_sccs, descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_protocol_2fcloudstate_2fevent_5fsourced_2eproto::offsets,
  file_level_metadata_protocol_2fcloudstate_2fevent_5fsourced_2eproto, 6, file_level_enum_descriptors_protocol_2fcloudstate_2fevent_5fsourced_2eproto, file_level_service_descriptors_protocol_2fcloudstate_2fevent_5fsourced_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_2fcloudstate_2fevent_5fsourced_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_2fcloudstate_2fevent_5fsourced_2eproto), true);
namespace cloudstate {
namespace eventsourced {

// ===================================================================

void EventSourcedInit::InitAsDefaultInstance() {
  ::cloudstate::eventsourced::_EventSourcedInit_default_instance_._instance.get_mutable()->snapshot_ = const_cast< ::cloudstate::eventsourced::EventSourcedSnapshot*>(
      ::cloudstate::eventsourced::EventSourcedSnapshot::internal_default_instance());
}
class EventSourcedInit::_Internal {
 public:
  static const ::cloudstate::eventsourced::EventSourcedSnapshot& snapshot(const EventSourcedInit* msg);
};

const ::cloudstate::eventsourced::EventSourcedSnapshot&
EventSourcedInit::_Internal::snapshot(const EventSourcedInit* msg) {
  return *msg->snapshot_;
}
EventSourcedInit::EventSourcedInit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.eventsourced.EventSourcedInit)
}
EventSourcedInit::EventSourcedInit(const EventSourcedInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  entity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entity_id().empty()) {
    entity_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  if (from._internal_has_snapshot()) {
    snapshot_ = new ::cloudstate::eventsourced::EventSourcedSnapshot(*from.snapshot_);
  } else {
    snapshot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cloudstate.eventsourced.EventSourcedInit)
}

void EventSourcedInit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventSourcedInit_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshot_ = nullptr;
}

EventSourcedInit::~EventSourcedInit() {
  // @@protoc_insertion_point(destructor:cloudstate.eventsourced.EventSourcedInit)
  SharedDtor();
}

void EventSourcedInit::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entity_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete snapshot_;
}

void EventSourcedInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventSourcedInit& EventSourcedInit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventSourcedInit_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base);
  return *internal_default_instance();
}


void EventSourcedInit::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.eventsourced.EventSourcedInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entity_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
  _internal_metadata_.Clear();
}

const char* EventSourcedInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.eventsourced.EventSourcedInit.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cloudstate.eventsourced.EventSourcedInit.entity_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cloudstate.eventsourced.EventSourcedSnapshot snapshot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventSourcedInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.eventsourced.EventSourcedInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.eventsourced.EventSourcedInit.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string entity_id = 2;
  if (this->entity_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cloudstate.eventsourced.EventSourcedInit.entity_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entity_id(), target);
  }

  // .cloudstate.eventsourced.EventSourcedSnapshot snapshot = 3;
  if (this->has_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::snapshot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.eventsourced.EventSourcedInit)
  return target;
}

size_t EventSourcedInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.eventsourced.EventSourcedInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string entity_id = 2;
  if (this->entity_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // .cloudstate.eventsourced.EventSourcedSnapshot snapshot = 3;
  if (this->has_snapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snapshot_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventSourcedInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.eventsourced.EventSourcedInit)
  GOOGLE_DCHECK_NE(&from, this);
  const EventSourcedInit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventSourcedInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.eventsourced.EventSourcedInit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.eventsourced.EventSourcedInit)
    MergeFrom(*source);
  }
}

void EventSourcedInit::MergeFrom(const EventSourcedInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.eventsourced.EventSourcedInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.entity_id().size() > 0) {

    entity_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  if (from.has_snapshot()) {
    _internal_mutable_snapshot()->::cloudstate::eventsourced::EventSourcedSnapshot::MergeFrom(from._internal_snapshot());
  }
}

void EventSourcedInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.eventsourced.EventSourcedInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSourcedInit::CopyFrom(const EventSourcedInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.eventsourced.EventSourcedInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSourcedInit::IsInitialized() const {
  return true;
}

void EventSourcedInit::InternalSwap(EventSourcedInit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entity_id_.Swap(&other->entity_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(snapshot_, other->snapshot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSourcedInit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventSourcedSnapshot::InitAsDefaultInstance() {
  ::cloudstate::eventsourced::_EventSourcedSnapshot_default_instance_._instance.get_mutable()->snapshot_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class EventSourcedSnapshot::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& snapshot(const EventSourcedSnapshot* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EventSourcedSnapshot::_Internal::snapshot(const EventSourcedSnapshot* msg) {
  return *msg->snapshot_;
}
void EventSourcedSnapshot::clear_snapshot() {
  if (GetArenaNoVirtual() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
}
EventSourcedSnapshot::EventSourcedSnapshot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.eventsourced.EventSourcedSnapshot)
}
EventSourcedSnapshot::EventSourcedSnapshot(const EventSourcedSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_snapshot()) {
    snapshot_ = new PROTOBUF_NAMESPACE_ID::Any(*from.snapshot_);
  } else {
    snapshot_ = nullptr;
  }
  snapshot_sequence_ = from.snapshot_sequence_;
  // @@protoc_insertion_point(copy_constructor:cloudstate.eventsourced.EventSourcedSnapshot)
}

void EventSourcedSnapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventSourcedSnapshot_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base);
  ::memset(&snapshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&snapshot_sequence_) -
      reinterpret_cast<char*>(&snapshot_)) + sizeof(snapshot_sequence_));
}

EventSourcedSnapshot::~EventSourcedSnapshot() {
  // @@protoc_insertion_point(destructor:cloudstate.eventsourced.EventSourcedSnapshot)
  SharedDtor();
}

void EventSourcedSnapshot::SharedDtor() {
  if (this != internal_default_instance()) delete snapshot_;
}

void EventSourcedSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventSourcedSnapshot& EventSourcedSnapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventSourcedSnapshot_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base);
  return *internal_default_instance();
}


void EventSourcedSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.eventsourced.EventSourcedSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
  snapshot_sequence_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* EventSourcedSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 snapshot_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          snapshot_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any snapshot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventSourcedSnapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.eventsourced.EventSourcedSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 snapshot_sequence = 1;
  if (this->snapshot_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_snapshot_sequence(), target);
  }

  // .google.protobuf.Any snapshot = 2;
  if (this->has_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::snapshot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.eventsourced.EventSourcedSnapshot)
  return target;
}

size_t EventSourcedSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.eventsourced.EventSourcedSnapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any snapshot = 2;
  if (this->has_snapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snapshot_);
  }

  // int64 snapshot_sequence = 1;
  if (this->snapshot_sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_snapshot_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventSourcedSnapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.eventsourced.EventSourcedSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const EventSourcedSnapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventSourcedSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.eventsourced.EventSourcedSnapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.eventsourced.EventSourcedSnapshot)
    MergeFrom(*source);
  }
}

void EventSourcedSnapshot::MergeFrom(const EventSourcedSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.eventsourced.EventSourcedSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_snapshot()) {
    _internal_mutable_snapshot()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_snapshot());
  }
  if (from.snapshot_sequence() != 0) {
    _internal_set_snapshot_sequence(from._internal_snapshot_sequence());
  }
}

void EventSourcedSnapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.eventsourced.EventSourcedSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSourcedSnapshot::CopyFrom(const EventSourcedSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.eventsourced.EventSourcedSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSourcedSnapshot::IsInitialized() const {
  return true;
}

void EventSourcedSnapshot::InternalSwap(EventSourcedSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(snapshot_, other->snapshot_);
  swap(snapshot_sequence_, other->snapshot_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSourcedSnapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventSourcedEvent::InitAsDefaultInstance() {
  ::cloudstate::eventsourced::_EventSourcedEvent_default_instance_._instance.get_mutable()->payload_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class EventSourcedEvent::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& payload(const EventSourcedEvent* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EventSourcedEvent::_Internal::payload(const EventSourcedEvent* msg) {
  return *msg->payload_;
}
void EventSourcedEvent::clear_payload() {
  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
EventSourcedEvent::EventSourcedEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.eventsourced.EventSourcedEvent)
}
EventSourcedEvent::EventSourcedEvent(const EventSourcedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new PROTOBUF_NAMESPACE_ID::Any(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:cloudstate.eventsourced.EventSourcedEvent)
}

void EventSourcedEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventSourcedEvent_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base);
  ::memset(&payload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&payload_)) + sizeof(sequence_));
}

EventSourcedEvent::~EventSourcedEvent() {
  // @@protoc_insertion_point(destructor:cloudstate.eventsourced.EventSourcedEvent)
  SharedDtor();
}

void EventSourcedEvent::SharedDtor() {
  if (this != internal_default_instance()) delete payload_;
}

void EventSourcedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventSourcedEvent& EventSourcedEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventSourcedEvent_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base);
  return *internal_default_instance();
}


void EventSourcedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.eventsourced.EventSourcedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  sequence_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* EventSourcedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventSourcedEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.eventsourced.EventSourcedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sequence = 1;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sequence(), target);
  }

  // .google.protobuf.Any payload = 2;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.eventsourced.EventSourcedEvent)
  return target;
}

size_t EventSourcedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.eventsourced.EventSourcedEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 2;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // int64 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventSourcedEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.eventsourced.EventSourcedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const EventSourcedEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventSourcedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.eventsourced.EventSourcedEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.eventsourced.EventSourcedEvent)
    MergeFrom(*source);
  }
}

void EventSourcedEvent::MergeFrom(const EventSourcedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.eventsourced.EventSourcedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_payload()) {
    _internal_mutable_payload()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_payload());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void EventSourcedEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.eventsourced.EventSourcedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSourcedEvent::CopyFrom(const EventSourcedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.eventsourced.EventSourcedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSourcedEvent::IsInitialized() const {
  return true;
}

void EventSourcedEvent::InternalSwap(EventSourcedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSourcedEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventSourcedReply::InitAsDefaultInstance() {
  ::cloudstate::eventsourced::_EventSourcedReply_default_instance_._instance.get_mutable()->client_action_ = const_cast< ::cloudstate::ClientAction*>(
      ::cloudstate::ClientAction::internal_default_instance());
  ::cloudstate::eventsourced::_EventSourcedReply_default_instance_._instance.get_mutable()->snapshot_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class EventSourcedReply::_Internal {
 public:
  static const ::cloudstate::ClientAction& client_action(const EventSourcedReply* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& snapshot(const EventSourcedReply* msg);
};

const ::cloudstate::ClientAction&
EventSourcedReply::_Internal::client_action(const EventSourcedReply* msg) {
  return *msg->client_action_;
}
const PROTOBUF_NAMESPACE_ID::Any&
EventSourcedReply::_Internal::snapshot(const EventSourcedReply* msg) {
  return *msg->snapshot_;
}
void EventSourcedReply::clear_client_action() {
  if (GetArenaNoVirtual() == nullptr && client_action_ != nullptr) {
    delete client_action_;
  }
  client_action_ = nullptr;
}
void EventSourcedReply::clear_side_effects() {
  side_effects_.Clear();
}
void EventSourcedReply::clear_events() {
  events_.Clear();
}
void EventSourcedReply::clear_snapshot() {
  if (GetArenaNoVirtual() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
}
EventSourcedReply::EventSourcedReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.eventsourced.EventSourcedReply)
}
EventSourcedReply::EventSourcedReply(const EventSourcedReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      side_effects_(from.side_effects_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_client_action()) {
    client_action_ = new ::cloudstate::ClientAction(*from.client_action_);
  } else {
    client_action_ = nullptr;
  }
  if (from._internal_has_snapshot()) {
    snapshot_ = new PROTOBUF_NAMESPACE_ID::Any(*from.snapshot_);
  } else {
    snapshot_ = nullptr;
  }
  command_id_ = from.command_id_;
  // @@protoc_insertion_point(copy_constructor:cloudstate.eventsourced.EventSourcedReply)
}

void EventSourcedReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventSourcedReply_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base);
  ::memset(&client_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&client_action_)) + sizeof(command_id_));
}

EventSourcedReply::~EventSourcedReply() {
  // @@protoc_insertion_point(destructor:cloudstate.eventsourced.EventSourcedReply)
  SharedDtor();
}

void EventSourcedReply::SharedDtor() {
  if (this != internal_default_instance()) delete client_action_;
  if (this != internal_default_instance()) delete snapshot_;
}

void EventSourcedReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventSourcedReply& EventSourcedReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventSourcedReply_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base);
  return *internal_default_instance();
}


void EventSourcedReply::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.eventsourced.EventSourcedReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  side_effects_.Clear();
  events_.Clear();
  if (GetArenaNoVirtual() == nullptr && client_action_ != nullptr) {
    delete client_action_;
  }
  client_action_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
  command_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* EventSourcedReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 command_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cloudstate.ClientAction client_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cloudstate.SideEffect side_effects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_side_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any snapshot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventSourcedReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.eventsourced.EventSourcedReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 command_id = 1;
  if (this->command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_command_id(), target);
  }

  // .cloudstate.ClientAction client_action = 2;
  if (this->has_client_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::client_action(this), target, stream);
  }

  // repeated .cloudstate.SideEffect side_effects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_side_effects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_side_effects(i), target, stream);
  }

  // repeated .google.protobuf.Any events = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_events(i), target, stream);
  }

  // .google.protobuf.Any snapshot = 5;
  if (this->has_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::snapshot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.eventsourced.EventSourcedReply)
  return target;
}

size_t EventSourcedReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.eventsourced.EventSourcedReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cloudstate.SideEffect side_effects = 3;
  total_size += 1UL * this->_internal_side_effects_size();
  for (const auto& msg : this->side_effects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Any events = 4;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cloudstate.ClientAction client_action = 2;
  if (this->has_client_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_action_);
  }

  // .google.protobuf.Any snapshot = 5;
  if (this->has_snapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snapshot_);
  }

  // int64 command_id = 1;
  if (this->command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_command_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventSourcedReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.eventsourced.EventSourcedReply)
  GOOGLE_DCHECK_NE(&from, this);
  const EventSourcedReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventSourcedReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.eventsourced.EventSourcedReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.eventsourced.EventSourcedReply)
    MergeFrom(*source);
  }
}

void EventSourcedReply::MergeFrom(const EventSourcedReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.eventsourced.EventSourcedReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  side_effects_.MergeFrom(from.side_effects_);
  events_.MergeFrom(from.events_);
  if (from.has_client_action()) {
    _internal_mutable_client_action()->::cloudstate::ClientAction::MergeFrom(from._internal_client_action());
  }
  if (from.has_snapshot()) {
    _internal_mutable_snapshot()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_snapshot());
  }
  if (from.command_id() != 0) {
    _internal_set_command_id(from._internal_command_id());
  }
}

void EventSourcedReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.eventsourced.EventSourcedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSourcedReply::CopyFrom(const EventSourcedReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.eventsourced.EventSourcedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSourcedReply::IsInitialized() const {
  return true;
}

void EventSourcedReply::InternalSwap(EventSourcedReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  side_effects_.InternalSwap(&other->side_effects_);
  events_.InternalSwap(&other->events_);
  swap(client_action_, other->client_action_);
  swap(snapshot_, other->snapshot_);
  swap(command_id_, other->command_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSourcedReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventSourcedStreamIn::InitAsDefaultInstance() {
  ::cloudstate::eventsourced::_EventSourcedStreamIn_default_instance_.init_ = const_cast< ::cloudstate::eventsourced::EventSourcedInit*>(
      ::cloudstate::eventsourced::EventSourcedInit::internal_default_instance());
  ::cloudstate::eventsourced::_EventSourcedStreamIn_default_instance_.event_ = const_cast< ::cloudstate::eventsourced::EventSourcedEvent*>(
      ::cloudstate::eventsourced::EventSourcedEvent::internal_default_instance());
  ::cloudstate::eventsourced::_EventSourcedStreamIn_default_instance_.command_ = const_cast< ::cloudstate::Command*>(
      ::cloudstate::Command::internal_default_instance());
}
class EventSourcedStreamIn::_Internal {
 public:
  static const ::cloudstate::eventsourced::EventSourcedInit& init(const EventSourcedStreamIn* msg);
  static const ::cloudstate::eventsourced::EventSourcedEvent& event(const EventSourcedStreamIn* msg);
  static const ::cloudstate::Command& command(const EventSourcedStreamIn* msg);
};

const ::cloudstate::eventsourced::EventSourcedInit&
EventSourcedStreamIn::_Internal::init(const EventSourcedStreamIn* msg) {
  return *msg->message_.init_;
}
const ::cloudstate::eventsourced::EventSourcedEvent&
EventSourcedStreamIn::_Internal::event(const EventSourcedStreamIn* msg) {
  return *msg->message_.event_;
}
const ::cloudstate::Command&
EventSourcedStreamIn::_Internal::command(const EventSourcedStreamIn* msg) {
  return *msg->message_.command_;
}
void EventSourcedStreamIn::set_allocated_init(::cloudstate::eventsourced::EventSourcedInit* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
    message_.init_ = init;
  }
  // @@protoc_insertion_point(field_set_allocated:cloudstate.eventsourced.EventSourcedStreamIn.init)
}
void EventSourcedStreamIn::set_allocated_event(::cloudstate::eventsourced::EventSourcedEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    message_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:cloudstate.eventsourced.EventSourcedStreamIn.event)
}
void EventSourcedStreamIn::set_allocated_command(::cloudstate::Command* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    set_has_command();
    message_.command_ = command;
  }
  // @@protoc_insertion_point(field_set_allocated:cloudstate.eventsourced.EventSourcedStreamIn.command)
}
void EventSourcedStreamIn::clear_command() {
  if (_internal_has_command()) {
    delete message_.command_;
    clear_has_message();
  }
}
EventSourcedStreamIn::EventSourcedStreamIn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.eventsourced.EventSourcedStreamIn)
}
EventSourcedStreamIn::EventSourcedStreamIn(const EventSourcedStreamIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kInit: {
      _internal_mutable_init()->::cloudstate::eventsourced::EventSourcedInit::MergeFrom(from._internal_init());
      break;
    }
    case kEvent: {
      _internal_mutable_event()->::cloudstate::eventsourced::EventSourcedEvent::MergeFrom(from._internal_event());
      break;
    }
    case kCommand: {
      _internal_mutable_command()->::cloudstate::Command::MergeFrom(from._internal_command());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cloudstate.eventsourced.EventSourcedStreamIn)
}

void EventSourcedStreamIn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventSourcedStreamIn_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base);
  clear_has_message();
}

EventSourcedStreamIn::~EventSourcedStreamIn() {
  // @@protoc_insertion_point(destructor:cloudstate.eventsourced.EventSourcedStreamIn)
  SharedDtor();
}

void EventSourcedStreamIn::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
}

void EventSourcedStreamIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventSourcedStreamIn& EventSourcedStreamIn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventSourcedStreamIn_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base);
  return *internal_default_instance();
}


void EventSourcedStreamIn::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:cloudstate.eventsourced.EventSourcedStreamIn)
  switch (message_case()) {
    case kInit: {
      delete message_.init_;
      break;
    }
    case kEvent: {
      delete message_.event_;
      break;
    }
    case kCommand: {
      delete message_.command_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void EventSourcedStreamIn::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.eventsourced.EventSourcedStreamIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear();
}

const char* EventSourcedStreamIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cloudstate.eventsourced.EventSourcedInit init = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cloudstate.eventsourced.EventSourcedEvent event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cloudstate.Command command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventSourcedStreamIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.eventsourced.EventSourcedStreamIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cloudstate.eventsourced.EventSourcedInit init = 1;
  if (_internal_has_init()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::init(this), target, stream);
  }

  // .cloudstate.eventsourced.EventSourcedEvent event = 2;
  if (_internal_has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::event(this), target, stream);
  }

  // .cloudstate.Command command = 3;
  if (_internal_has_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.eventsourced.EventSourcedStreamIn)
  return target;
}

size_t EventSourcedStreamIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.eventsourced.EventSourcedStreamIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .cloudstate.eventsourced.EventSourcedInit init = 1;
    case kInit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.init_);
      break;
    }
    // .cloudstate.eventsourced.EventSourcedEvent event = 2;
    case kEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.event_);
      break;
    }
    // .cloudstate.Command command = 3;
    case kCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.command_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventSourcedStreamIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.eventsourced.EventSourcedStreamIn)
  GOOGLE_DCHECK_NE(&from, this);
  const EventSourcedStreamIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventSourcedStreamIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.eventsourced.EventSourcedStreamIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.eventsourced.EventSourcedStreamIn)
    MergeFrom(*source);
  }
}

void EventSourcedStreamIn::MergeFrom(const EventSourcedStreamIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.eventsourced.EventSourcedStreamIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kInit: {
      _internal_mutable_init()->::cloudstate::eventsourced::EventSourcedInit::MergeFrom(from._internal_init());
      break;
    }
    case kEvent: {
      _internal_mutable_event()->::cloudstate::eventsourced::EventSourcedEvent::MergeFrom(from._internal_event());
      break;
    }
    case kCommand: {
      _internal_mutable_command()->::cloudstate::Command::MergeFrom(from._internal_command());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void EventSourcedStreamIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.eventsourced.EventSourcedStreamIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSourcedStreamIn::CopyFrom(const EventSourcedStreamIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.eventsourced.EventSourcedStreamIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSourcedStreamIn::IsInitialized() const {
  return true;
}

void EventSourcedStreamIn::InternalSwap(EventSourcedStreamIn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSourcedStreamIn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventSourcedStreamOut::InitAsDefaultInstance() {
  ::cloudstate::eventsourced::_EventSourcedStreamOut_default_instance_.reply_ = const_cast< ::cloudstate::eventsourced::EventSourcedReply*>(
      ::cloudstate::eventsourced::EventSourcedReply::internal_default_instance());
  ::cloudstate::eventsourced::_EventSourcedStreamOut_default_instance_.failure_ = const_cast< ::cloudstate::Failure*>(
      ::cloudstate::Failure::internal_default_instance());
}
class EventSourcedStreamOut::_Internal {
 public:
  static const ::cloudstate::eventsourced::EventSourcedReply& reply(const EventSourcedStreamOut* msg);
  static const ::cloudstate::Failure& failure(const EventSourcedStreamOut* msg);
};

const ::cloudstate::eventsourced::EventSourcedReply&
EventSourcedStreamOut::_Internal::reply(const EventSourcedStreamOut* msg) {
  return *msg->message_.reply_;
}
const ::cloudstate::Failure&
EventSourcedStreamOut::_Internal::failure(const EventSourcedStreamOut* msg) {
  return *msg->message_.failure_;
}
void EventSourcedStreamOut::set_allocated_reply(::cloudstate::eventsourced::EventSourcedReply* reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply, submessage_arena);
    }
    set_has_reply();
    message_.reply_ = reply;
  }
  // @@protoc_insertion_point(field_set_allocated:cloudstate.eventsourced.EventSourcedStreamOut.reply)
}
void EventSourcedStreamOut::set_allocated_failure(::cloudstate::Failure* failure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (failure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      failure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    set_has_failure();
    message_.failure_ = failure;
  }
  // @@protoc_insertion_point(field_set_allocated:cloudstate.eventsourced.EventSourcedStreamOut.failure)
}
void EventSourcedStreamOut::clear_failure() {
  if (_internal_has_failure()) {
    delete message_.failure_;
    clear_has_message();
  }
}
EventSourcedStreamOut::EventSourcedStreamOut()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cloudstate.eventsourced.EventSourcedStreamOut)
}
EventSourcedStreamOut::EventSourcedStreamOut(const EventSourcedStreamOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kReply: {
      _internal_mutable_reply()->::cloudstate::eventsourced::EventSourcedReply::MergeFrom(from._internal_reply());
      break;
    }
    case kFailure: {
      _internal_mutable_failure()->::cloudstate::Failure::MergeFrom(from._internal_failure());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cloudstate.eventsourced.EventSourcedStreamOut)
}

void EventSourcedStreamOut::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventSourcedStreamOut_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base);
  clear_has_message();
}

EventSourcedStreamOut::~EventSourcedStreamOut() {
  // @@protoc_insertion_point(destructor:cloudstate.eventsourced.EventSourcedStreamOut)
  SharedDtor();
}

void EventSourcedStreamOut::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
}

void EventSourcedStreamOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventSourcedStreamOut& EventSourcedStreamOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventSourcedStreamOut_protocol_2fcloudstate_2fevent_5fsourced_2eproto.base);
  return *internal_default_instance();
}


void EventSourcedStreamOut::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:cloudstate.eventsourced.EventSourcedStreamOut)
  switch (message_case()) {
    case kReply: {
      delete message_.reply_;
      break;
    }
    case kFailure: {
      delete message_.failure_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void EventSourcedStreamOut::Clear() {
// @@protoc_insertion_point(message_clear_start:cloudstate.eventsourced.EventSourcedStreamOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear();
}

const char* EventSourcedStreamOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cloudstate.eventsourced.EventSourcedReply reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cloudstate.Failure failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_failure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventSourcedStreamOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cloudstate.eventsourced.EventSourcedStreamOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cloudstate.eventsourced.EventSourcedReply reply = 1;
  if (_internal_has_reply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reply(this), target, stream);
  }

  // .cloudstate.Failure failure = 2;
  if (_internal_has_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::failure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cloudstate.eventsourced.EventSourcedStreamOut)
  return target;
}

size_t EventSourcedStreamOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cloudstate.eventsourced.EventSourcedStreamOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .cloudstate.eventsourced.EventSourcedReply reply = 1;
    case kReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.reply_);
      break;
    }
    // .cloudstate.Failure failure = 2;
    case kFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.failure_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventSourcedStreamOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cloudstate.eventsourced.EventSourcedStreamOut)
  GOOGLE_DCHECK_NE(&from, this);
  const EventSourcedStreamOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventSourcedStreamOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cloudstate.eventsourced.EventSourcedStreamOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cloudstate.eventsourced.EventSourcedStreamOut)
    MergeFrom(*source);
  }
}

void EventSourcedStreamOut::MergeFrom(const EventSourcedStreamOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cloudstate.eventsourced.EventSourcedStreamOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kReply: {
      _internal_mutable_reply()->::cloudstate::eventsourced::EventSourcedReply::MergeFrom(from._internal_reply());
      break;
    }
    case kFailure: {
      _internal_mutable_failure()->::cloudstate::Failure::MergeFrom(from._internal_failure());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void EventSourcedStreamOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cloudstate.eventsourced.EventSourcedStreamOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSourcedStreamOut::CopyFrom(const EventSourcedStreamOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cloudstate.eventsourced.EventSourcedStreamOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSourcedStreamOut::IsInitialized() const {
  return true;
}

void EventSourcedStreamOut::InternalSwap(EventSourcedStreamOut* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSourcedStreamOut::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace eventsourced
}  // namespace cloudstate
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cloudstate::eventsourced::EventSourcedInit* Arena::CreateMaybeMessage< ::cloudstate::eventsourced::EventSourcedInit >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::eventsourced::EventSourcedInit >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::eventsourced::EventSourcedSnapshot* Arena::CreateMaybeMessage< ::cloudstate::eventsourced::EventSourcedSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::eventsourced::EventSourcedSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::eventsourced::EventSourcedEvent* Arena::CreateMaybeMessage< ::cloudstate::eventsourced::EventSourcedEvent >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::eventsourced::EventSourcedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::eventsourced::EventSourcedReply* Arena::CreateMaybeMessage< ::cloudstate::eventsourced::EventSourcedReply >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::eventsourced::EventSourcedReply >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::eventsourced::EventSourcedStreamIn* Arena::CreateMaybeMessage< ::cloudstate::eventsourced::EventSourcedStreamIn >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::eventsourced::EventSourcedStreamIn >(arena);
}
template<> PROTOBUF_NOINLINE ::cloudstate::eventsourced::EventSourcedStreamOut* Arena::CreateMaybeMessage< ::cloudstate::eventsourced::EventSourcedStreamOut >(Arena* arena) {
  return Arena::CreateInternal< ::cloudstate::eventsourced::EventSourcedStreamOut >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
