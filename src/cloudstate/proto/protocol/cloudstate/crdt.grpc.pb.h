// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protocol/cloudstate/crdt.proto
// Original file comments:
// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// gRPC interface for CRDT Entity user functions.
//
#ifndef GRPC_protocol_2fcloudstate_2fcrdt_2eproto__INCLUDED
#define GRPC_protocol_2fcloudstate_2fcrdt_2eproto__INCLUDED

#include "protocol/cloudstate/crdt.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace cloudstate {
namespace crdt {

// CRDT Protocol
//
// Note that while this protocol provides support for CRDTs, the data types sent across the protocol are not CRDTs
// themselves. It is the responsibility of the CloudState proxy to implement the CRDTs, merge functions, vector clocks
// etc, not the user function. The user function need only hold the current value in memory, and this protocol sends
// deltas to the user function to update its in memory value as necessary. These deltas have no way of dealing with
// conflicts, hence it important that the CloudState proxy always know what the state of the user functions in memory
// value is before sending a delta. If the CloudState proxy is not sure what the value is, eg because it has just sent
// an operation to the user function may have updated its value as a result, the proxy should wait until it gets the
// result of the operation back, to ensure its in memory value is in sync with the user function so that it can
// calculate deltas that won't conflict.
//
// The user function is expected to update its value both as the result of receiving deltas from the proxy, as well as
// when it sends deltas. It must not update its value in any other circumstance, updating the value in response to any
// other stimuli risks the value becoming out of sync with the CloudState proxy. The user function will not be sent
// back deltas as a result of its own changes.
//
// An invocation of handle is made for each entity being handled. It may be kept alive and used to handle multiple
// commands, and may subsequently be terminated if that entity becomes idle, or if the entity is deleted. Shutdown is
// typically done for efficiency reasons, unless the entity is explicitly deleted, a terminated handle stream does not
// mean the proxy has stopped tracking the state of the entity in its memory.
//
// Special care must be taken when working with maps and sets. The keys/values are google.protobuf.Any, which encodes
// the value as binary protobuf, however, serialized protobufs are not stable, two semantically equal objects could
// encode to different bytes. It is the responsibility of the user function to ensure that stable encodings are used.
class Crdt final {
 public:
  static constexpr char const* service_full_name() {
    return "cloudstate.crdt.Crdt";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // After invoking handle, the first message sent will always be a CrdtInit message, containing the entity ID, and,
    // if it exists or is available, the current state of the entity. After that, one or more commands may be sent,
    // as well as deltas as they arrive, and the entire state if either the entity is created, or the proxy wishes the
    // user function to replace its entire state.
    //
    // The user function must respond with one reply per command in. They do not necessarily have to be sent in the same
    // order that the commands were sent, the command ID is used to correlate commands to replies.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>> handle(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>>(handleRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>> Asynchandle(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>>(AsynchandleRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>> PrepareAsynchandle(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>>(PrepareAsynchandleRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // After invoking handle, the first message sent will always be a CrdtInit message, containing the entity ID, and,
      // if it exists or is available, the current state of the entity. After that, one or more commands may be sent,
      // as well as deltas as they arrive, and the entire state if either the entity is created, or the proxy wishes the
      // user function to replace its entire state.
      //
      // The user function must respond with one reply per command in. They do not necessarily have to be sent in the same
      // order that the commands were sent, the command ID is used to correlate commands to replies.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void handle(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::cloudstate::crdt::CrdtStreamIn,::cloudstate::crdt::CrdtStreamOut>* reactor) = 0;
      #else
      virtual void handle(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::cloudstate::crdt::CrdtStreamIn,::cloudstate::crdt::CrdtStreamOut>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>* handleRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>* AsynchandleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>* PrepareAsynchandleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>> handle(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>>(handleRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>> Asynchandle(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>>(AsynchandleRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>> PrepareAsynchandle(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>>(PrepareAsynchandleRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void handle(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::cloudstate::crdt::CrdtStreamIn,::cloudstate::crdt::CrdtStreamOut>* reactor) override;
      #else
      void handle(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::cloudstate::crdt::CrdtStreamIn,::cloudstate::crdt::CrdtStreamOut>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>* handleRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>* AsynchandleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>* PrepareAsynchandleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_handle_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // After invoking handle, the first message sent will always be a CrdtInit message, containing the entity ID, and,
    // if it exists or is available, the current state of the entity. After that, one or more commands may be sent,
    // as well as deltas as they arrive, and the entire state if either the entity is created, or the proxy wishes the
    // user function to replace its entire state.
    //
    // The user function must respond with one reply per command in. They do not necessarily have to be sent in the same
    // order that the commands were sent, the command ID is used to correlate commands to replies.
    virtual ::grpc::Status handle(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::cloudstate::crdt::CrdtStreamOut, ::cloudstate::crdt::CrdtStreamIn>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_handle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_handle() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_handle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handle(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cloudstate::crdt::CrdtStreamOut, ::cloudstate::crdt::CrdtStreamIn>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesthandle(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::cloudstate::crdt::CrdtStreamOut, ::cloudstate::crdt::CrdtStreamIn>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_handle<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_handle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_handle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->handle(context); }));
    }
    ~ExperimentalWithCallbackMethod_handle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handle(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cloudstate::crdt::CrdtStreamOut, ::cloudstate::crdt::CrdtStreamIn>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>* handle(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::cloudstate::crdt::CrdtStreamIn, ::cloudstate::crdt::CrdtStreamOut>* handle(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_handle<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_handle<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_handle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_handle() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_handle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handle(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cloudstate::crdt::CrdtStreamOut, ::cloudstate::crdt::CrdtStreamIn>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_handle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_handle() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_handle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handle(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cloudstate::crdt::CrdtStreamOut, ::cloudstate::crdt::CrdtStreamIn>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesthandle(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_handle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_handle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->handle(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_handle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status handle(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::cloudstate::crdt::CrdtStreamOut, ::cloudstate::crdt::CrdtStreamIn>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* handle(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* handle(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace crdt
}  // namespace cloudstate


#endif  // GRPC_protocol_2fcloudstate_2fcrdt_2eproto__INCLUDED
