// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protocol/cloudstate/function.proto

#include "protocol/cloudstate/function.pb.h"
#include "protocol/cloudstate/function.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace cloudstate {
namespace function {

static const char* StatelessFunction_method_names[] = {
  "/cloudstate.function.StatelessFunction/handleUnary",
  "/cloudstate.function.StatelessFunction/handleStreamedIn",
  "/cloudstate.function.StatelessFunction/handleStreamedOut",
  "/cloudstate.function.StatelessFunction/handleStreamed",
};

std::unique_ptr< StatelessFunction::Stub> StatelessFunction::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StatelessFunction::Stub> stub(new StatelessFunction::Stub(channel));
  return stub;
}

StatelessFunction::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_handleUnary_(StatelessFunction_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_handleStreamedIn_(StatelessFunction_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_handleStreamedOut_(StatelessFunction_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_handleStreamed_(StatelessFunction_method_names[3], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status StatelessFunction::Stub::handleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::cloudstate::function::FunctionReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_handleUnary_, context, request, response);
}

void StatelessFunction::Stub::experimental_async::handleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand* request, ::cloudstate::function::FunctionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_handleUnary_, context, request, response, std::move(f));
}

void StatelessFunction::Stub::experimental_async::handleUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::function::FunctionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_handleUnary_, context, request, response, std::move(f));
}

void StatelessFunction::Stub::experimental_async::handleUnary(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand* request, ::cloudstate::function::FunctionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_handleUnary_, context, request, response, reactor);
}

void StatelessFunction::Stub::experimental_async::handleUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::function::FunctionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_handleUnary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudstate::function::FunctionReply>* StatelessFunction::Stub::AsynchandleUnaryRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::cloudstate::function::FunctionReply>::Create(channel_.get(), cq, rpcmethod_handleUnary_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cloudstate::function::FunctionReply>* StatelessFunction::Stub::PrepareAsynchandleUnaryRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::cloudstate::function::FunctionReply>::Create(channel_.get(), cq, rpcmethod_handleUnary_, context, request, false);
}

::grpc::ClientWriter< ::cloudstate::function::FunctionCommand>* StatelessFunction::Stub::handleStreamedInRaw(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::cloudstate::function::FunctionCommand>::Create(channel_.get(), rpcmethod_handleStreamedIn_, context, response);
}

void StatelessFunction::Stub::experimental_async::handleStreamedIn(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::experimental::ClientWriteReactor< ::cloudstate::function::FunctionCommand>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::cloudstate::function::FunctionCommand>::Create(stub_->channel_.get(), stub_->rpcmethod_handleStreamedIn_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::cloudstate::function::FunctionCommand>* StatelessFunction::Stub::AsynchandleStreamedInRaw(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::cloudstate::function::FunctionCommand>::Create(channel_.get(), cq, rpcmethod_handleStreamedIn_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::cloudstate::function::FunctionCommand>* StatelessFunction::Stub::PrepareAsynchandleStreamedInRaw(::grpc::ClientContext* context, ::cloudstate::function::FunctionReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::cloudstate::function::FunctionCommand>::Create(channel_.get(), cq, rpcmethod_handleStreamedIn_, context, response, false, nullptr);
}

::grpc::ClientReader< ::cloudstate::function::FunctionReply>* StatelessFunction::Stub::handleStreamedOutRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::cloudstate::function::FunctionReply>::Create(channel_.get(), rpcmethod_handleStreamedOut_, context, request);
}

void StatelessFunction::Stub::experimental_async::handleStreamedOut(::grpc::ClientContext* context, ::cloudstate::function::FunctionCommand* request, ::grpc::experimental::ClientReadReactor< ::cloudstate::function::FunctionReply>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::cloudstate::function::FunctionReply>::Create(stub_->channel_.get(), stub_->rpcmethod_handleStreamedOut_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::cloudstate::function::FunctionReply>* StatelessFunction::Stub::AsynchandleStreamedOutRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::cloudstate::function::FunctionReply>::Create(channel_.get(), cq, rpcmethod_handleStreamedOut_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::cloudstate::function::FunctionReply>* StatelessFunction::Stub::PrepareAsynchandleStreamedOutRaw(::grpc::ClientContext* context, const ::cloudstate::function::FunctionCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::cloudstate::function::FunctionReply>::Create(channel_.get(), cq, rpcmethod_handleStreamedOut_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>* StatelessFunction::Stub::handleStreamedRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>::Create(channel_.get(), rpcmethod_handleStreamed_, context);
}

void StatelessFunction::Stub::experimental_async::handleStreamed(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::cloudstate::function::FunctionCommand,::cloudstate::function::FunctionReply>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::cloudstate::function::FunctionCommand,::cloudstate::function::FunctionReply>::Create(stub_->channel_.get(), stub_->rpcmethod_handleStreamed_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>* StatelessFunction::Stub::AsynchandleStreamedRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>::Create(channel_.get(), cq, rpcmethod_handleStreamed_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>* StatelessFunction::Stub::PrepareAsynchandleStreamedRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>::Create(channel_.get(), cq, rpcmethod_handleStreamed_, context, false, nullptr);
}

StatelessFunction::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StatelessFunction_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StatelessFunction::Service, ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>(
          std::mem_fn(&StatelessFunction::Service::handleUnary), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StatelessFunction_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< StatelessFunction::Service, ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>(
          std::mem_fn(&StatelessFunction::Service::handleStreamedIn), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StatelessFunction_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StatelessFunction::Service, ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>(
          std::mem_fn(&StatelessFunction::Service::handleStreamedOut), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StatelessFunction_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< StatelessFunction::Service, ::cloudstate::function::FunctionCommand, ::cloudstate::function::FunctionReply>(
          std::mem_fn(&StatelessFunction::Service::handleStreamed), this)));
}

StatelessFunction::Service::~Service() {
}

::grpc::Status StatelessFunction::Service::handleUnary(::grpc::ServerContext* context, const ::cloudstate::function::FunctionCommand* request, ::cloudstate::function::FunctionReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StatelessFunction::Service::handleStreamedIn(::grpc::ServerContext* context, ::grpc::ServerReader< ::cloudstate::function::FunctionCommand>* reader, ::cloudstate::function::FunctionReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StatelessFunction::Service::handleStreamedOut(::grpc::ServerContext* context, const ::cloudstate::function::FunctionCommand* request, ::grpc::ServerWriter< ::cloudstate::function::FunctionReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StatelessFunction::Service::handleStreamed(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::cloudstate::function::FunctionReply, ::cloudstate::function::FunctionCommand>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cloudstate
}  // namespace function

