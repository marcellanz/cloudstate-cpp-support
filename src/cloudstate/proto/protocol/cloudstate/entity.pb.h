// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/cloudstate/entity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2fcloudstate_2fentity_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2fcloudstate_2fentity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2fcloudstate_2fentity_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2fcloudstate_2fentity_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fcloudstate_2fentity_2eproto;
namespace cloudstate {
class ClientAction;
class ClientActionDefaultTypeInternal;
extern ClientActionDefaultTypeInternal _ClientAction_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Entity;
class EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class EntitySpec;
class EntitySpecDefaultTypeInternal;
extern EntitySpecDefaultTypeInternal _EntitySpec_default_instance_;
class Failure;
class FailureDefaultTypeInternal;
extern FailureDefaultTypeInternal _Failure_default_instance_;
class Forward;
class ForwardDefaultTypeInternal;
extern ForwardDefaultTypeInternal _Forward_default_instance_;
class ProxyInfo;
class ProxyInfoDefaultTypeInternal;
extern ProxyInfoDefaultTypeInternal _ProxyInfo_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class ServiceInfo;
class ServiceInfoDefaultTypeInternal;
extern ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
class SideEffect;
class SideEffectDefaultTypeInternal;
extern SideEffectDefaultTypeInternal _SideEffect_default_instance_;
class StreamCancelled;
class StreamCancelledDefaultTypeInternal;
extern StreamCancelledDefaultTypeInternal _StreamCancelled_default_instance_;
class UserFunctionError;
class UserFunctionErrorDefaultTypeInternal;
extern UserFunctionErrorDefaultTypeInternal _UserFunctionError_default_instance_;
}  // namespace cloudstate
PROTOBUF_NAMESPACE_OPEN
template<> ::cloudstate::ClientAction* Arena::CreateMaybeMessage<::cloudstate::ClientAction>(Arena*);
template<> ::cloudstate::Command* Arena::CreateMaybeMessage<::cloudstate::Command>(Arena*);
template<> ::cloudstate::Entity* Arena::CreateMaybeMessage<::cloudstate::Entity>(Arena*);
template<> ::cloudstate::EntitySpec* Arena::CreateMaybeMessage<::cloudstate::EntitySpec>(Arena*);
template<> ::cloudstate::Failure* Arena::CreateMaybeMessage<::cloudstate::Failure>(Arena*);
template<> ::cloudstate::Forward* Arena::CreateMaybeMessage<::cloudstate::Forward>(Arena*);
template<> ::cloudstate::ProxyInfo* Arena::CreateMaybeMessage<::cloudstate::ProxyInfo>(Arena*);
template<> ::cloudstate::Reply* Arena::CreateMaybeMessage<::cloudstate::Reply>(Arena*);
template<> ::cloudstate::ServiceInfo* Arena::CreateMaybeMessage<::cloudstate::ServiceInfo>(Arena*);
template<> ::cloudstate::SideEffect* Arena::CreateMaybeMessage<::cloudstate::SideEffect>(Arena*);
template<> ::cloudstate::StreamCancelled* Arena::CreateMaybeMessage<::cloudstate::StreamCancelled>(Arena*);
template<> ::cloudstate::UserFunctionError* Arena::CreateMaybeMessage<::cloudstate::UserFunctionError>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cloudstate {

// ===================================================================

class Reply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.Reply) */ {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(nullptr);
  }

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.Reply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fentity_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // .google.protobuf.Any payload = 1;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const PROTOBUF_NAMESPACE_ID::Any& payload() const;
  PROTOBUF_NAMESPACE_ID::Any* release_payload();
  PROTOBUF_NAMESPACE_ID::Any* mutable_payload();
  void set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_payload() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.Reply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fentity_2eproto;
};
// -------------------------------------------------------------------

class Forward :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.Forward) */ {
 public:
  Forward();
  virtual ~Forward();

  Forward(const Forward& from);
  Forward(Forward&& from) noexcept
    : Forward() {
    *this = ::std::move(from);
  }

  inline Forward& operator=(const Forward& from) {
    CopyFrom(from);
    return *this;
  }
  inline Forward& operator=(Forward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Forward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Forward* internal_default_instance() {
    return reinterpret_cast<const Forward*>(
               &_Forward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Forward& a, Forward& b) {
    a.Swap(&b);
  }
  inline void Swap(Forward* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Forward* New() const final {
    return CreateMaybeMessage<Forward>(nullptr);
  }

  Forward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Forward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Forward& from);
  void MergeFrom(const Forward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Forward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.Forward";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fentity_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kCommandNameFieldNumber = 2,
    kPayloadFieldNumber = 3,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string command_name = 2;
  void clear_command_name();
  const std::string& command_name() const;
  void set_command_name(const std::string& value);
  void set_command_name(std::string&& value);
  void set_command_name(const char* value);
  void set_command_name(const char* value, size_t size);
  std::string* mutable_command_name();
  std::string* release_command_name();
  void set_allocated_command_name(std::string* command_name);
  private:
  const std::string& _internal_command_name() const;
  void _internal_set_command_name(const std::string& value);
  std::string* _internal_mutable_command_name();
  public:

  // .google.protobuf.Any payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const PROTOBUF_NAMESPACE_ID::Any& payload() const;
  PROTOBUF_NAMESPACE_ID::Any* release_payload();
  PROTOBUF_NAMESPACE_ID::Any* mutable_payload();
  void set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_payload() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.Forward)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_name_;
  PROTOBUF_NAMESPACE_ID::Any* payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fentity_2eproto;
};
// -------------------------------------------------------------------

class ClientAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.ClientAction) */ {
 public:
  ClientAction();
  virtual ~ClientAction();

  ClientAction(const ClientAction& from);
  ClientAction(ClientAction&& from) noexcept
    : ClientAction() {
    *this = ::std::move(from);
  }

  inline ClientAction& operator=(const ClientAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientAction& operator=(ClientAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientAction& default_instance();

  enum ActionCase {
    kReply = 1,
    kForward = 2,
    kFailure = 3,
    ACTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientAction* internal_default_instance() {
    return reinterpret_cast<const ClientAction*>(
               &_ClientAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientAction& a, ClientAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientAction* New() const final {
    return CreateMaybeMessage<ClientAction>(nullptr);
  }

  ClientAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientAction& from);
  void MergeFrom(const ClientAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.ClientAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fentity_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
    kForwardFieldNumber = 2,
    kFailureFieldNumber = 3,
  };
  // .cloudstate.Reply reply = 1;
  bool has_reply() const;
  private:
  bool _internal_has_reply() const;
  public:
  void clear_reply();
  const ::cloudstate::Reply& reply() const;
  ::cloudstate::Reply* release_reply();
  ::cloudstate::Reply* mutable_reply();
  void set_allocated_reply(::cloudstate::Reply* reply);
  private:
  const ::cloudstate::Reply& _internal_reply() const;
  ::cloudstate::Reply* _internal_mutable_reply();
  public:

  // .cloudstate.Forward forward = 2;
  bool has_forward() const;
  private:
  bool _internal_has_forward() const;
  public:
  void clear_forward();
  const ::cloudstate::Forward& forward() const;
  ::cloudstate::Forward* release_forward();
  ::cloudstate::Forward* mutable_forward();
  void set_allocated_forward(::cloudstate::Forward* forward);
  private:
  const ::cloudstate::Forward& _internal_forward() const;
  ::cloudstate::Forward* _internal_mutable_forward();
  public:

  // .cloudstate.Failure failure = 3;
  bool has_failure() const;
  private:
  bool _internal_has_failure() const;
  public:
  void clear_failure();
  const ::cloudstate::Failure& failure() const;
  ::cloudstate::Failure* release_failure();
  ::cloudstate::Failure* mutable_failure();
  void set_allocated_failure(::cloudstate::Failure* failure);
  private:
  const ::cloudstate::Failure& _internal_failure() const;
  ::cloudstate::Failure* _internal_mutable_failure();
  public:

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:cloudstate.ClientAction)
 private:
  class _Internal;
  void set_has_reply();
  void set_has_forward();
  void set_has_failure();

  inline bool has_action() const;
  inline void clear_has_action();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ActionUnion {
    ActionUnion() {}
    ::cloudstate::Reply* reply_;
    ::cloudstate::Forward* forward_;
    ::cloudstate::Failure* failure_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protocol_2fcloudstate_2fentity_2eproto;
};
// -------------------------------------------------------------------

class SideEffect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.SideEffect) */ {
 public:
  SideEffect();
  virtual ~SideEffect();

  SideEffect(const SideEffect& from);
  SideEffect(SideEffect&& from) noexcept
    : SideEffect() {
    *this = ::std::move(from);
  }

  inline SideEffect& operator=(const SideEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SideEffect& operator=(SideEffect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SideEffect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SideEffect* internal_default_instance() {
    return reinterpret_cast<const SideEffect*>(
               &_SideEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SideEffect& a, SideEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(SideEffect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SideEffect* New() const final {
    return CreateMaybeMessage<SideEffect>(nullptr);
  }

  SideEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SideEffect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SideEffect& from);
  void MergeFrom(const SideEffect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SideEffect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.SideEffect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fentity_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kCommandNameFieldNumber = 2,
    kPayloadFieldNumber = 3,
    kSynchronousFieldNumber = 4,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string command_name = 2;
  void clear_command_name();
  const std::string& command_name() const;
  void set_command_name(const std::string& value);
  void set_command_name(std::string&& value);
  void set_command_name(const char* value);
  void set_command_name(const char* value, size_t size);
  std::string* mutable_command_name();
  std::string* release_command_name();
  void set_allocated_command_name(std::string* command_name);
  private:
  const std::string& _internal_command_name() const;
  void _internal_set_command_name(const std::string& value);
  std::string* _internal_mutable_command_name();
  public:

  // .google.protobuf.Any payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const PROTOBUF_NAMESPACE_ID::Any& payload() const;
  PROTOBUF_NAMESPACE_ID::Any* release_payload();
  PROTOBUF_NAMESPACE_ID::Any* mutable_payload();
  void set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_payload() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_payload();
  public:

  // bool synchronous = 4;
  void clear_synchronous();
  bool synchronous() const;
  void set_synchronous(bool value);
  private:
  bool _internal_synchronous() const;
  void _internal_set_synchronous(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.SideEffect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_name_;
  PROTOBUF_NAMESPACE_ID::Any* payload_;
  bool synchronous_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fentity_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.Command";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fentity_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kNameFieldNumber = 3,
    kPayloadFieldNumber = 4,
    kIdFieldNumber = 2,
    kStreamedFieldNumber = 5,
  };
  // string entity_id = 1;
  void clear_entity_id();
  const std::string& entity_id() const;
  void set_entity_id(const std::string& value);
  void set_entity_id(std::string&& value);
  void set_entity_id(const char* value);
  void set_entity_id(const char* value, size_t size);
  std::string* mutable_entity_id();
  std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Any payload = 4;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const PROTOBUF_NAMESPACE_ID::Any& payload() const;
  PROTOBUF_NAMESPACE_ID::Any* release_payload();
  PROTOBUF_NAMESPACE_ID::Any* mutable_payload();
  void set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_payload() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_payload();
  public:

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool streamed = 5;
  void clear_streamed();
  bool streamed() const;
  void set_streamed(bool value);
  private:
  bool _internal_streamed() const;
  void _internal_set_streamed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.Command)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Any* payload_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool streamed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fentity_2eproto;
};
// -------------------------------------------------------------------

class StreamCancelled :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.StreamCancelled) */ {
 public:
  StreamCancelled();
  virtual ~StreamCancelled();

  StreamCancelled(const StreamCancelled& from);
  StreamCancelled(StreamCancelled&& from) noexcept
    : StreamCancelled() {
    *this = ::std::move(from);
  }

  inline StreamCancelled& operator=(const StreamCancelled& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamCancelled& operator=(StreamCancelled&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamCancelled& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamCancelled* internal_default_instance() {
    return reinterpret_cast<const StreamCancelled*>(
               &_StreamCancelled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StreamCancelled& a, StreamCancelled& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamCancelled* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamCancelled* New() const final {
    return CreateMaybeMessage<StreamCancelled>(nullptr);
  }

  StreamCancelled* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamCancelled>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamCancelled& from);
  void MergeFrom(const StreamCancelled& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamCancelled* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.StreamCancelled";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fentity_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string entity_id = 1;
  void clear_entity_id();
  const std::string& entity_id() const;
  void set_entity_id(const std::string& value);
  void set_entity_id(std::string&& value);
  void set_entity_id(const char* value);
  void set_entity_id(const char* value, size_t size);
  std::string* mutable_entity_id();
  std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.StreamCancelled)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fentity_2eproto;
};
// -------------------------------------------------------------------

class Failure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.Failure) */ {
 public:
  Failure();
  virtual ~Failure();

  Failure(const Failure& from);
  Failure(Failure&& from) noexcept
    : Failure() {
    *this = ::std::move(from);
  }

  inline Failure& operator=(const Failure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Failure& operator=(Failure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Failure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Failure* internal_default_instance() {
    return reinterpret_cast<const Failure*>(
               &_Failure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Failure& a, Failure& b) {
    a.Swap(&b);
  }
  inline void Swap(Failure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Failure* New() const final {
    return CreateMaybeMessage<Failure>(nullptr);
  }

  Failure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Failure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Failure& from);
  void MergeFrom(const Failure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Failure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.Failure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fentity_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kCommandIdFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int64 command_id = 1;
  void clear_command_id();
  ::PROTOBUF_NAMESPACE_ID::int64 command_id() const;
  void set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_command_id() const;
  void _internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.Failure)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int64 command_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fentity_2eproto;
};
// -------------------------------------------------------------------

class EntitySpec :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.EntitySpec) */ {
 public:
  EntitySpec();
  virtual ~EntitySpec();

  EntitySpec(const EntitySpec& from);
  EntitySpec(EntitySpec&& from) noexcept
    : EntitySpec() {
    *this = ::std::move(from);
  }

  inline EntitySpec& operator=(const EntitySpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntitySpec& operator=(EntitySpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntitySpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntitySpec* internal_default_instance() {
    return reinterpret_cast<const EntitySpec*>(
               &_EntitySpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EntitySpec& a, EntitySpec& b) {
    a.Swap(&b);
  }
  inline void Swap(EntitySpec* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntitySpec* New() const final {
    return CreateMaybeMessage<EntitySpec>(nullptr);
  }

  EntitySpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntitySpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntitySpec& from);
  void MergeFrom(const EntitySpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntitySpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.EntitySpec";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fentity_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 2,
    kProtoFieldNumber = 1,
    kServiceInfoFieldNumber = 3,
  };
  // repeated .cloudstate.Entity entities = 2;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::cloudstate::Entity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloudstate::Entity >*
      mutable_entities();
  private:
  const ::cloudstate::Entity& _internal_entities(int index) const;
  ::cloudstate::Entity* _internal_add_entities();
  public:
  const ::cloudstate::Entity& entities(int index) const;
  ::cloudstate::Entity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloudstate::Entity >&
      entities() const;

  // bytes proto = 1;
  void clear_proto();
  const std::string& proto() const;
  void set_proto(const std::string& value);
  void set_proto(std::string&& value);
  void set_proto(const char* value);
  void set_proto(const void* value, size_t size);
  std::string* mutable_proto();
  std::string* release_proto();
  void set_allocated_proto(std::string* proto);
  private:
  const std::string& _internal_proto() const;
  void _internal_set_proto(const std::string& value);
  std::string* _internal_mutable_proto();
  public:

  // .cloudstate.ServiceInfo service_info = 3;
  bool has_service_info() const;
  private:
  bool _internal_has_service_info() const;
  public:
  void clear_service_info();
  const ::cloudstate::ServiceInfo& service_info() const;
  ::cloudstate::ServiceInfo* release_service_info();
  ::cloudstate::ServiceInfo* mutable_service_info();
  void set_allocated_service_info(::cloudstate::ServiceInfo* service_info);
  private:
  const ::cloudstate::ServiceInfo& _internal_service_info() const;
  ::cloudstate::ServiceInfo* _internal_mutable_service_info();
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.EntitySpec)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloudstate::Entity > entities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_;
  ::cloudstate::ServiceInfo* service_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fentity_2eproto;
};
// -------------------------------------------------------------------

class ServiceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.ServiceInfo) */ {
 public:
  ServiceInfo();
  virtual ~ServiceInfo();

  ServiceInfo(const ServiceInfo& from);
  ServiceInfo(ServiceInfo&& from) noexcept
    : ServiceInfo() {
    *this = ::std::move(from);
  }

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInfo& operator=(ServiceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceInfo*>(
               &_ServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServiceInfo& a, ServiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceInfo* New() const final {
    return CreateMaybeMessage<ServiceInfo>(nullptr);
  }

  ServiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceInfo& from);
  void MergeFrom(const ServiceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.ServiceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fentity_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kServiceVersionFieldNumber = 2,
    kServiceRuntimeFieldNumber = 3,
    kSupportLibraryNameFieldNumber = 4,
    kSupportLibraryVersionFieldNumber = 5,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string service_version = 2;
  void clear_service_version();
  const std::string& service_version() const;
  void set_service_version(const std::string& value);
  void set_service_version(std::string&& value);
  void set_service_version(const char* value);
  void set_service_version(const char* value, size_t size);
  std::string* mutable_service_version();
  std::string* release_service_version();
  void set_allocated_service_version(std::string* service_version);
  private:
  const std::string& _internal_service_version() const;
  void _internal_set_service_version(const std::string& value);
  std::string* _internal_mutable_service_version();
  public:

  // string service_runtime = 3;
  void clear_service_runtime();
  const std::string& service_runtime() const;
  void set_service_runtime(const std::string& value);
  void set_service_runtime(std::string&& value);
  void set_service_runtime(const char* value);
  void set_service_runtime(const char* value, size_t size);
  std::string* mutable_service_runtime();
  std::string* release_service_runtime();
  void set_allocated_service_runtime(std::string* service_runtime);
  private:
  const std::string& _internal_service_runtime() const;
  void _internal_set_service_runtime(const std::string& value);
  std::string* _internal_mutable_service_runtime();
  public:

  // string support_library_name = 4;
  void clear_support_library_name();
  const std::string& support_library_name() const;
  void set_support_library_name(const std::string& value);
  void set_support_library_name(std::string&& value);
  void set_support_library_name(const char* value);
  void set_support_library_name(const char* value, size_t size);
  std::string* mutable_support_library_name();
  std::string* release_support_library_name();
  void set_allocated_support_library_name(std::string* support_library_name);
  private:
  const std::string& _internal_support_library_name() const;
  void _internal_set_support_library_name(const std::string& value);
  std::string* _internal_mutable_support_library_name();
  public:

  // string support_library_version = 5;
  void clear_support_library_version();
  const std::string& support_library_version() const;
  void set_support_library_version(const std::string& value);
  void set_support_library_version(std::string&& value);
  void set_support_library_version(const char* value);
  void set_support_library_version(const char* value, size_t size);
  std::string* mutable_support_library_version();
  std::string* release_support_library_version();
  void set_allocated_support_library_version(std::string* support_library_version);
  private:
  const std::string& _internal_support_library_version() const;
  void _internal_set_support_library_version(const std::string& value);
  std::string* _internal_mutable_support_library_version();
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.ServiceInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_runtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr support_library_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr support_library_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fentity_2eproto;
};
// -------------------------------------------------------------------

class Entity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.Entity) */ {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entity* New() const final {
    return CreateMaybeMessage<Entity>(nullptr);
  }

  Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.Entity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fentity_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityTypeFieldNumber = 1,
    kServiceNameFieldNumber = 2,
    kPersistenceIdFieldNumber = 3,
  };
  // string entity_type = 1;
  void clear_entity_type();
  const std::string& entity_type() const;
  void set_entity_type(const std::string& value);
  void set_entity_type(std::string&& value);
  void set_entity_type(const char* value);
  void set_entity_type(const char* value, size_t size);
  std::string* mutable_entity_type();
  std::string* release_entity_type();
  void set_allocated_entity_type(std::string* entity_type);
  private:
  const std::string& _internal_entity_type() const;
  void _internal_set_entity_type(const std::string& value);
  std::string* _internal_mutable_entity_type();
  public:

  // string service_name = 2;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string persistence_id = 3;
  void clear_persistence_id();
  const std::string& persistence_id() const;
  void set_persistence_id(const std::string& value);
  void set_persistence_id(std::string&& value);
  void set_persistence_id(const char* value);
  void set_persistence_id(const char* value, size_t size);
  std::string* mutable_persistence_id();
  std::string* release_persistence_id();
  void set_allocated_persistence_id(std::string* persistence_id);
  private:
  const std::string& _internal_persistence_id() const;
  void _internal_set_persistence_id(const std::string& value);
  std::string* _internal_mutable_persistence_id();
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.Entity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persistence_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fentity_2eproto;
};
// -------------------------------------------------------------------

class UserFunctionError :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.UserFunctionError) */ {
 public:
  UserFunctionError();
  virtual ~UserFunctionError();

  UserFunctionError(const UserFunctionError& from);
  UserFunctionError(UserFunctionError&& from) noexcept
    : UserFunctionError() {
    *this = ::std::move(from);
  }

  inline UserFunctionError& operator=(const UserFunctionError& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserFunctionError& operator=(UserFunctionError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserFunctionError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserFunctionError* internal_default_instance() {
    return reinterpret_cast<const UserFunctionError*>(
               &_UserFunctionError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserFunctionError& a, UserFunctionError& b) {
    a.Swap(&b);
  }
  inline void Swap(UserFunctionError* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserFunctionError* New() const final {
    return CreateMaybeMessage<UserFunctionError>(nullptr);
  }

  UserFunctionError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserFunctionError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserFunctionError& from);
  void MergeFrom(const UserFunctionError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFunctionError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.UserFunctionError";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fentity_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.UserFunctionError)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fentity_2eproto;
};
// -------------------------------------------------------------------

class ProxyInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cloudstate.ProxyInfo) */ {
 public:
  ProxyInfo();
  virtual ~ProxyInfo();

  ProxyInfo(const ProxyInfo& from);
  ProxyInfo(ProxyInfo&& from) noexcept
    : ProxyInfo() {
    *this = ::std::move(from);
  }

  inline ProxyInfo& operator=(const ProxyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyInfo& operator=(ProxyInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProxyInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxyInfo* internal_default_instance() {
    return reinterpret_cast<const ProxyInfo*>(
               &_ProxyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ProxyInfo& a, ProxyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyInfo* New() const final {
    return CreateMaybeMessage<ProxyInfo>(nullptr);
  }

  ProxyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProxyInfo& from);
  void MergeFrom(const ProxyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProxyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cloudstate.ProxyInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcloudstate_2fentity_2eproto);
    return ::descriptor_table_protocol_2fcloudstate_2fentity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedEntityTypesFieldNumber = 5,
    kProxyNameFieldNumber = 3,
    kProxyVersionFieldNumber = 4,
    kProtocolMajorVersionFieldNumber = 1,
    kProtocolMinorVersionFieldNumber = 2,
  };
  // repeated string supported_entity_types = 5;
  int supported_entity_types_size() const;
  private:
  int _internal_supported_entity_types_size() const;
  public:
  void clear_supported_entity_types();
  const std::string& supported_entity_types(int index) const;
  std::string* mutable_supported_entity_types(int index);
  void set_supported_entity_types(int index, const std::string& value);
  void set_supported_entity_types(int index, std::string&& value);
  void set_supported_entity_types(int index, const char* value);
  void set_supported_entity_types(int index, const char* value, size_t size);
  std::string* add_supported_entity_types();
  void add_supported_entity_types(const std::string& value);
  void add_supported_entity_types(std::string&& value);
  void add_supported_entity_types(const char* value);
  void add_supported_entity_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& supported_entity_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_supported_entity_types();
  private:
  const std::string& _internal_supported_entity_types(int index) const;
  std::string* _internal_add_supported_entity_types();
  public:

  // string proxy_name = 3;
  void clear_proxy_name();
  const std::string& proxy_name() const;
  void set_proxy_name(const std::string& value);
  void set_proxy_name(std::string&& value);
  void set_proxy_name(const char* value);
  void set_proxy_name(const char* value, size_t size);
  std::string* mutable_proxy_name();
  std::string* release_proxy_name();
  void set_allocated_proxy_name(std::string* proxy_name);
  private:
  const std::string& _internal_proxy_name() const;
  void _internal_set_proxy_name(const std::string& value);
  std::string* _internal_mutable_proxy_name();
  public:

  // string proxy_version = 4;
  void clear_proxy_version();
  const std::string& proxy_version() const;
  void set_proxy_version(const std::string& value);
  void set_proxy_version(std::string&& value);
  void set_proxy_version(const char* value);
  void set_proxy_version(const char* value, size_t size);
  std::string* mutable_proxy_version();
  std::string* release_proxy_version();
  void set_allocated_proxy_version(std::string* proxy_version);
  private:
  const std::string& _internal_proxy_version() const;
  void _internal_set_proxy_version(const std::string& value);
  std::string* _internal_mutable_proxy_version();
  public:

  // int32 protocol_major_version = 1;
  void clear_protocol_major_version();
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_major_version() const;
  void set_protocol_major_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protocol_major_version() const;
  void _internal_set_protocol_major_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 protocol_minor_version = 2;
  void clear_protocol_minor_version();
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_minor_version() const;
  void set_protocol_minor_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protocol_minor_version() const;
  void _internal_set_protocol_minor_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cloudstate.ProxyInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> supported_entity_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxy_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxy_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_major_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_minor_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2fcloudstate_2fentity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Reply

// .google.protobuf.Any payload = 1;
inline bool Reply::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool Reply::has_payload() const {
  return _internal_has_payload();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Reply::_internal_payload() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = payload_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Reply::payload() const {
  // @@protoc_insertion_point(field_get:cloudstate.Reply.payload)
  return _internal_payload();
}
inline PROTOBUF_NAMESPACE_ID::Any* Reply::release_payload() {
  // @@protoc_insertion_point(field_release:cloudstate.Reply.payload)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Reply::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    payload_ = p;
  }
  return payload_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Reply::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:cloudstate.Reply.payload)
  return _internal_mutable_payload();
}
inline void Reply::set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:cloudstate.Reply.payload)
}

// -------------------------------------------------------------------

// Forward

// string service_name = 1;
inline void Forward::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Forward::service_name() const {
  // @@protoc_insertion_point(field_get:cloudstate.Forward.service_name)
  return _internal_service_name();
}
inline void Forward::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:cloudstate.Forward.service_name)
}
inline std::string* Forward::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:cloudstate.Forward.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& Forward::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void Forward::_internal_set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Forward::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.Forward.service_name)
}
inline void Forward::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.Forward.service_name)
}
inline void Forward::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.Forward.service_name)
}
inline std::string* Forward::_internal_mutable_service_name() {
  
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Forward::release_service_name() {
  // @@protoc_insertion_point(field_release:cloudstate.Forward.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Forward::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.Forward.service_name)
}

// string command_name = 2;
inline void Forward::clear_command_name() {
  command_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Forward::command_name() const {
  // @@protoc_insertion_point(field_get:cloudstate.Forward.command_name)
  return _internal_command_name();
}
inline void Forward::set_command_name(const std::string& value) {
  _internal_set_command_name(value);
  // @@protoc_insertion_point(field_set:cloudstate.Forward.command_name)
}
inline std::string* Forward::mutable_command_name() {
  // @@protoc_insertion_point(field_mutable:cloudstate.Forward.command_name)
  return _internal_mutable_command_name();
}
inline const std::string& Forward::_internal_command_name() const {
  return command_name_.GetNoArena();
}
inline void Forward::_internal_set_command_name(const std::string& value) {
  
  command_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Forward::set_command_name(std::string&& value) {
  
  command_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.Forward.command_name)
}
inline void Forward::set_command_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.Forward.command_name)
}
inline void Forward::set_command_name(const char* value, size_t size) {
  
  command_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.Forward.command_name)
}
inline std::string* Forward::_internal_mutable_command_name() {
  
  return command_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Forward::release_command_name() {
  // @@protoc_insertion_point(field_release:cloudstate.Forward.command_name)
  
  return command_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Forward::set_allocated_command_name(std::string* command_name) {
  if (command_name != nullptr) {
    
  } else {
    
  }
  command_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_name);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.Forward.command_name)
}

// .google.protobuf.Any payload = 3;
inline bool Forward::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool Forward::has_payload() const {
  return _internal_has_payload();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Forward::_internal_payload() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = payload_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Forward::payload() const {
  // @@protoc_insertion_point(field_get:cloudstate.Forward.payload)
  return _internal_payload();
}
inline PROTOBUF_NAMESPACE_ID::Any* Forward::release_payload() {
  // @@protoc_insertion_point(field_release:cloudstate.Forward.payload)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Forward::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    payload_ = p;
  }
  return payload_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Forward::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:cloudstate.Forward.payload)
  return _internal_mutable_payload();
}
inline void Forward::set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:cloudstate.Forward.payload)
}

// -------------------------------------------------------------------

// ClientAction

// .cloudstate.Reply reply = 1;
inline bool ClientAction::_internal_has_reply() const {
  return action_case() == kReply;
}
inline bool ClientAction::has_reply() const {
  return _internal_has_reply();
}
inline void ClientAction::set_has_reply() {
  _oneof_case_[0] = kReply;
}
inline void ClientAction::clear_reply() {
  if (_internal_has_reply()) {
    delete action_.reply_;
    clear_has_action();
  }
}
inline ::cloudstate::Reply* ClientAction::release_reply() {
  // @@protoc_insertion_point(field_release:cloudstate.ClientAction.reply)
  if (_internal_has_reply()) {
    clear_has_action();
      ::cloudstate::Reply* temp = action_.reply_;
    action_.reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cloudstate::Reply& ClientAction::_internal_reply() const {
  return _internal_has_reply()
      ? *action_.reply_
      : *reinterpret_cast< ::cloudstate::Reply*>(&::cloudstate::_Reply_default_instance_);
}
inline const ::cloudstate::Reply& ClientAction::reply() const {
  // @@protoc_insertion_point(field_get:cloudstate.ClientAction.reply)
  return _internal_reply();
}
inline ::cloudstate::Reply* ClientAction::_internal_mutable_reply() {
  if (!_internal_has_reply()) {
    clear_action();
    set_has_reply();
    action_.reply_ = CreateMaybeMessage< ::cloudstate::Reply >(
        GetArenaNoVirtual());
  }
  return action_.reply_;
}
inline ::cloudstate::Reply* ClientAction::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:cloudstate.ClientAction.reply)
  return _internal_mutable_reply();
}

// .cloudstate.Forward forward = 2;
inline bool ClientAction::_internal_has_forward() const {
  return action_case() == kForward;
}
inline bool ClientAction::has_forward() const {
  return _internal_has_forward();
}
inline void ClientAction::set_has_forward() {
  _oneof_case_[0] = kForward;
}
inline void ClientAction::clear_forward() {
  if (_internal_has_forward()) {
    delete action_.forward_;
    clear_has_action();
  }
}
inline ::cloudstate::Forward* ClientAction::release_forward() {
  // @@protoc_insertion_point(field_release:cloudstate.ClientAction.forward)
  if (_internal_has_forward()) {
    clear_has_action();
      ::cloudstate::Forward* temp = action_.forward_;
    action_.forward_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cloudstate::Forward& ClientAction::_internal_forward() const {
  return _internal_has_forward()
      ? *action_.forward_
      : *reinterpret_cast< ::cloudstate::Forward*>(&::cloudstate::_Forward_default_instance_);
}
inline const ::cloudstate::Forward& ClientAction::forward() const {
  // @@protoc_insertion_point(field_get:cloudstate.ClientAction.forward)
  return _internal_forward();
}
inline ::cloudstate::Forward* ClientAction::_internal_mutable_forward() {
  if (!_internal_has_forward()) {
    clear_action();
    set_has_forward();
    action_.forward_ = CreateMaybeMessage< ::cloudstate::Forward >(
        GetArenaNoVirtual());
  }
  return action_.forward_;
}
inline ::cloudstate::Forward* ClientAction::mutable_forward() {
  // @@protoc_insertion_point(field_mutable:cloudstate.ClientAction.forward)
  return _internal_mutable_forward();
}

// .cloudstate.Failure failure = 3;
inline bool ClientAction::_internal_has_failure() const {
  return action_case() == kFailure;
}
inline bool ClientAction::has_failure() const {
  return _internal_has_failure();
}
inline void ClientAction::set_has_failure() {
  _oneof_case_[0] = kFailure;
}
inline void ClientAction::clear_failure() {
  if (_internal_has_failure()) {
    delete action_.failure_;
    clear_has_action();
  }
}
inline ::cloudstate::Failure* ClientAction::release_failure() {
  // @@protoc_insertion_point(field_release:cloudstate.ClientAction.failure)
  if (_internal_has_failure()) {
    clear_has_action();
      ::cloudstate::Failure* temp = action_.failure_;
    action_.failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cloudstate::Failure& ClientAction::_internal_failure() const {
  return _internal_has_failure()
      ? *action_.failure_
      : *reinterpret_cast< ::cloudstate::Failure*>(&::cloudstate::_Failure_default_instance_);
}
inline const ::cloudstate::Failure& ClientAction::failure() const {
  // @@protoc_insertion_point(field_get:cloudstate.ClientAction.failure)
  return _internal_failure();
}
inline ::cloudstate::Failure* ClientAction::_internal_mutable_failure() {
  if (!_internal_has_failure()) {
    clear_action();
    set_has_failure();
    action_.failure_ = CreateMaybeMessage< ::cloudstate::Failure >(
        GetArenaNoVirtual());
  }
  return action_.failure_;
}
inline ::cloudstate::Failure* ClientAction::mutable_failure() {
  // @@protoc_insertion_point(field_mutable:cloudstate.ClientAction.failure)
  return _internal_mutable_failure();
}

inline bool ClientAction::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void ClientAction::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline ClientAction::ActionCase ClientAction::action_case() const {
  return ClientAction::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SideEffect

// string service_name = 1;
inline void SideEffect::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SideEffect::service_name() const {
  // @@protoc_insertion_point(field_get:cloudstate.SideEffect.service_name)
  return _internal_service_name();
}
inline void SideEffect::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:cloudstate.SideEffect.service_name)
}
inline std::string* SideEffect::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:cloudstate.SideEffect.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& SideEffect::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void SideEffect::_internal_set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SideEffect::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.SideEffect.service_name)
}
inline void SideEffect::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.SideEffect.service_name)
}
inline void SideEffect::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.SideEffect.service_name)
}
inline std::string* SideEffect::_internal_mutable_service_name() {
  
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SideEffect::release_service_name() {
  // @@protoc_insertion_point(field_release:cloudstate.SideEffect.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SideEffect::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.SideEffect.service_name)
}

// string command_name = 2;
inline void SideEffect::clear_command_name() {
  command_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SideEffect::command_name() const {
  // @@protoc_insertion_point(field_get:cloudstate.SideEffect.command_name)
  return _internal_command_name();
}
inline void SideEffect::set_command_name(const std::string& value) {
  _internal_set_command_name(value);
  // @@protoc_insertion_point(field_set:cloudstate.SideEffect.command_name)
}
inline std::string* SideEffect::mutable_command_name() {
  // @@protoc_insertion_point(field_mutable:cloudstate.SideEffect.command_name)
  return _internal_mutable_command_name();
}
inline const std::string& SideEffect::_internal_command_name() const {
  return command_name_.GetNoArena();
}
inline void SideEffect::_internal_set_command_name(const std::string& value) {
  
  command_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SideEffect::set_command_name(std::string&& value) {
  
  command_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.SideEffect.command_name)
}
inline void SideEffect::set_command_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.SideEffect.command_name)
}
inline void SideEffect::set_command_name(const char* value, size_t size) {
  
  command_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.SideEffect.command_name)
}
inline std::string* SideEffect::_internal_mutable_command_name() {
  
  return command_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SideEffect::release_command_name() {
  // @@protoc_insertion_point(field_release:cloudstate.SideEffect.command_name)
  
  return command_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SideEffect::set_allocated_command_name(std::string* command_name) {
  if (command_name != nullptr) {
    
  } else {
    
  }
  command_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_name);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.SideEffect.command_name)
}

// .google.protobuf.Any payload = 3;
inline bool SideEffect::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool SideEffect::has_payload() const {
  return _internal_has_payload();
}
inline const PROTOBUF_NAMESPACE_ID::Any& SideEffect::_internal_payload() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = payload_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& SideEffect::payload() const {
  // @@protoc_insertion_point(field_get:cloudstate.SideEffect.payload)
  return _internal_payload();
}
inline PROTOBUF_NAMESPACE_ID::Any* SideEffect::release_payload() {
  // @@protoc_insertion_point(field_release:cloudstate.SideEffect.payload)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* SideEffect::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    payload_ = p;
  }
  return payload_;
}
inline PROTOBUF_NAMESPACE_ID::Any* SideEffect::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:cloudstate.SideEffect.payload)
  return _internal_mutable_payload();
}
inline void SideEffect::set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:cloudstate.SideEffect.payload)
}

// bool synchronous = 4;
inline void SideEffect::clear_synchronous() {
  synchronous_ = false;
}
inline bool SideEffect::_internal_synchronous() const {
  return synchronous_;
}
inline bool SideEffect::synchronous() const {
  // @@protoc_insertion_point(field_get:cloudstate.SideEffect.synchronous)
  return _internal_synchronous();
}
inline void SideEffect::_internal_set_synchronous(bool value) {
  
  synchronous_ = value;
}
inline void SideEffect::set_synchronous(bool value) {
  _internal_set_synchronous(value);
  // @@protoc_insertion_point(field_set:cloudstate.SideEffect.synchronous)
}

// -------------------------------------------------------------------

// Command

// string entity_id = 1;
inline void Command::clear_entity_id() {
  entity_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Command::entity_id() const {
  // @@protoc_insertion_point(field_get:cloudstate.Command.entity_id)
  return _internal_entity_id();
}
inline void Command::set_entity_id(const std::string& value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:cloudstate.Command.entity_id)
}
inline std::string* Command::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:cloudstate.Command.entity_id)
  return _internal_mutable_entity_id();
}
inline const std::string& Command::_internal_entity_id() const {
  return entity_id_.GetNoArena();
}
inline void Command::_internal_set_entity_id(const std::string& value) {
  
  entity_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Command::set_entity_id(std::string&& value) {
  
  entity_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.Command.entity_id)
}
inline void Command::set_entity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.Command.entity_id)
}
inline void Command::set_entity_id(const char* value, size_t size) {
  
  entity_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.Command.entity_id)
}
inline std::string* Command::_internal_mutable_entity_id() {
  
  return entity_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_entity_id() {
  // @@protoc_insertion_point(field_release:cloudstate.Command.entity_id)
  
  return entity_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  entity_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_id);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.Command.entity_id)
}

// int64 id = 2;
inline void Command::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Command::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Command::id() const {
  // @@protoc_insertion_point(field_get:cloudstate.Command.id)
  return _internal_id();
}
inline void Command::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Command::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cloudstate.Command.id)
}

// string name = 3;
inline void Command::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Command::name() const {
  // @@protoc_insertion_point(field_get:cloudstate.Command.name)
  return _internal_name();
}
inline void Command::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:cloudstate.Command.name)
}
inline std::string* Command::mutable_name() {
  // @@protoc_insertion_point(field_mutable:cloudstate.Command.name)
  return _internal_mutable_name();
}
inline const std::string& Command::_internal_name() const {
  return name_.GetNoArena();
}
inline void Command::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Command::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.Command.name)
}
inline void Command::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.Command.name)
}
inline void Command::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.Command.name)
}
inline std::string* Command::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_name() {
  // @@protoc_insertion_point(field_release:cloudstate.Command.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.Command.name)
}

// .google.protobuf.Any payload = 4;
inline bool Command::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool Command::has_payload() const {
  return _internal_has_payload();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Command::_internal_payload() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = payload_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Command::payload() const {
  // @@protoc_insertion_point(field_get:cloudstate.Command.payload)
  return _internal_payload();
}
inline PROTOBUF_NAMESPACE_ID::Any* Command::release_payload() {
  // @@protoc_insertion_point(field_release:cloudstate.Command.payload)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Command::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    payload_ = p;
  }
  return payload_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Command::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:cloudstate.Command.payload)
  return _internal_mutable_payload();
}
inline void Command::set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:cloudstate.Command.payload)
}

// bool streamed = 5;
inline void Command::clear_streamed() {
  streamed_ = false;
}
inline bool Command::_internal_streamed() const {
  return streamed_;
}
inline bool Command::streamed() const {
  // @@protoc_insertion_point(field_get:cloudstate.Command.streamed)
  return _internal_streamed();
}
inline void Command::_internal_set_streamed(bool value) {
  
  streamed_ = value;
}
inline void Command::set_streamed(bool value) {
  _internal_set_streamed(value);
  // @@protoc_insertion_point(field_set:cloudstate.Command.streamed)
}

// -------------------------------------------------------------------

// StreamCancelled

// string entity_id = 1;
inline void StreamCancelled::clear_entity_id() {
  entity_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StreamCancelled::entity_id() const {
  // @@protoc_insertion_point(field_get:cloudstate.StreamCancelled.entity_id)
  return _internal_entity_id();
}
inline void StreamCancelled::set_entity_id(const std::string& value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:cloudstate.StreamCancelled.entity_id)
}
inline std::string* StreamCancelled::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:cloudstate.StreamCancelled.entity_id)
  return _internal_mutable_entity_id();
}
inline const std::string& StreamCancelled::_internal_entity_id() const {
  return entity_id_.GetNoArena();
}
inline void StreamCancelled::_internal_set_entity_id(const std::string& value) {
  
  entity_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StreamCancelled::set_entity_id(std::string&& value) {
  
  entity_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.StreamCancelled.entity_id)
}
inline void StreamCancelled::set_entity_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.StreamCancelled.entity_id)
}
inline void StreamCancelled::set_entity_id(const char* value, size_t size) {
  
  entity_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.StreamCancelled.entity_id)
}
inline std::string* StreamCancelled::_internal_mutable_entity_id() {
  
  return entity_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StreamCancelled::release_entity_id() {
  // @@protoc_insertion_point(field_release:cloudstate.StreamCancelled.entity_id)
  
  return entity_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StreamCancelled::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  entity_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_id);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.StreamCancelled.entity_id)
}

// int64 id = 2;
inline void StreamCancelled::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StreamCancelled::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StreamCancelled::id() const {
  // @@protoc_insertion_point(field_get:cloudstate.StreamCancelled.id)
  return _internal_id();
}
inline void StreamCancelled::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void StreamCancelled::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cloudstate.StreamCancelled.id)
}

// -------------------------------------------------------------------

// Failure

// int64 command_id = 1;
inline void Failure::clear_command_id() {
  command_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Failure::_internal_command_id() const {
  return command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Failure::command_id() const {
  // @@protoc_insertion_point(field_get:cloudstate.Failure.command_id)
  return _internal_command_id();
}
inline void Failure::_internal_set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  command_id_ = value;
}
inline void Failure::set_command_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:cloudstate.Failure.command_id)
}

// string description = 2;
inline void Failure::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Failure::description() const {
  // @@protoc_insertion_point(field_get:cloudstate.Failure.description)
  return _internal_description();
}
inline void Failure::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:cloudstate.Failure.description)
}
inline std::string* Failure::mutable_description() {
  // @@protoc_insertion_point(field_mutable:cloudstate.Failure.description)
  return _internal_mutable_description();
}
inline const std::string& Failure::_internal_description() const {
  return description_.GetNoArena();
}
inline void Failure::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Failure::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.Failure.description)
}
inline void Failure::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.Failure.description)
}
inline void Failure::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.Failure.description)
}
inline std::string* Failure::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Failure::release_description() {
  // @@protoc_insertion_point(field_release:cloudstate.Failure.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Failure::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.Failure.description)
}

// -------------------------------------------------------------------

// EntitySpec

// bytes proto = 1;
inline void EntitySpec::clear_proto() {
  proto_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EntitySpec::proto() const {
  // @@protoc_insertion_point(field_get:cloudstate.EntitySpec.proto)
  return _internal_proto();
}
inline void EntitySpec::set_proto(const std::string& value) {
  _internal_set_proto(value);
  // @@protoc_insertion_point(field_set:cloudstate.EntitySpec.proto)
}
inline std::string* EntitySpec::mutable_proto() {
  // @@protoc_insertion_point(field_mutable:cloudstate.EntitySpec.proto)
  return _internal_mutable_proto();
}
inline const std::string& EntitySpec::_internal_proto() const {
  return proto_.GetNoArena();
}
inline void EntitySpec::_internal_set_proto(const std::string& value) {
  
  proto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EntitySpec::set_proto(std::string&& value) {
  
  proto_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.EntitySpec.proto)
}
inline void EntitySpec::set_proto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.EntitySpec.proto)
}
inline void EntitySpec::set_proto(const void* value, size_t size) {
  
  proto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.EntitySpec.proto)
}
inline std::string* EntitySpec::_internal_mutable_proto() {
  
  return proto_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EntitySpec::release_proto() {
  // @@protoc_insertion_point(field_release:cloudstate.EntitySpec.proto)
  
  return proto_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EntitySpec::set_allocated_proto(std::string* proto) {
  if (proto != nullptr) {
    
  } else {
    
  }
  proto_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.EntitySpec.proto)
}

// repeated .cloudstate.Entity entities = 2;
inline int EntitySpec::_internal_entities_size() const {
  return entities_.size();
}
inline int EntitySpec::entities_size() const {
  return _internal_entities_size();
}
inline void EntitySpec::clear_entities() {
  entities_.Clear();
}
inline ::cloudstate::Entity* EntitySpec::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:cloudstate.EntitySpec.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloudstate::Entity >*
EntitySpec::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:cloudstate.EntitySpec.entities)
  return &entities_;
}
inline const ::cloudstate::Entity& EntitySpec::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::cloudstate::Entity& EntitySpec::entities(int index) const {
  // @@protoc_insertion_point(field_get:cloudstate.EntitySpec.entities)
  return _internal_entities(index);
}
inline ::cloudstate::Entity* EntitySpec::_internal_add_entities() {
  return entities_.Add();
}
inline ::cloudstate::Entity* EntitySpec::add_entities() {
  // @@protoc_insertion_point(field_add:cloudstate.EntitySpec.entities)
  return _internal_add_entities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cloudstate::Entity >&
EntitySpec::entities() const {
  // @@protoc_insertion_point(field_list:cloudstate.EntitySpec.entities)
  return entities_;
}

// .cloudstate.ServiceInfo service_info = 3;
inline bool EntitySpec::_internal_has_service_info() const {
  return this != internal_default_instance() && service_info_ != nullptr;
}
inline bool EntitySpec::has_service_info() const {
  return _internal_has_service_info();
}
inline void EntitySpec::clear_service_info() {
  if (GetArenaNoVirtual() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
}
inline const ::cloudstate::ServiceInfo& EntitySpec::_internal_service_info() const {
  const ::cloudstate::ServiceInfo* p = service_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cloudstate::ServiceInfo*>(
      &::cloudstate::_ServiceInfo_default_instance_);
}
inline const ::cloudstate::ServiceInfo& EntitySpec::service_info() const {
  // @@protoc_insertion_point(field_get:cloudstate.EntitySpec.service_info)
  return _internal_service_info();
}
inline ::cloudstate::ServiceInfo* EntitySpec::release_service_info() {
  // @@protoc_insertion_point(field_release:cloudstate.EntitySpec.service_info)
  
  ::cloudstate::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  return temp;
}
inline ::cloudstate::ServiceInfo* EntitySpec::_internal_mutable_service_info() {
  
  if (service_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cloudstate::ServiceInfo>(GetArenaNoVirtual());
    service_info_ = p;
  }
  return service_info_;
}
inline ::cloudstate::ServiceInfo* EntitySpec::mutable_service_info() {
  // @@protoc_insertion_point(field_mutable:cloudstate.EntitySpec.service_info)
  return _internal_mutable_service_info();
}
inline void EntitySpec::set_allocated_service_info(::cloudstate::ServiceInfo* service_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete service_info_;
  }
  if (service_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_info, submessage_arena);
    }
    
  } else {
    
  }
  service_info_ = service_info;
  // @@protoc_insertion_point(field_set_allocated:cloudstate.EntitySpec.service_info)
}

// -------------------------------------------------------------------

// ServiceInfo

// string service_name = 1;
inline void ServiceInfo::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceInfo::service_name() const {
  // @@protoc_insertion_point(field_get:cloudstate.ServiceInfo.service_name)
  return _internal_service_name();
}
inline void ServiceInfo::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:cloudstate.ServiceInfo.service_name)
}
inline std::string* ServiceInfo::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:cloudstate.ServiceInfo.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& ServiceInfo::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void ServiceInfo::_internal_set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceInfo::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.ServiceInfo.service_name)
}
inline void ServiceInfo::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.ServiceInfo.service_name)
}
inline void ServiceInfo::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.ServiceInfo.service_name)
}
inline std::string* ServiceInfo::_internal_mutable_service_name() {
  
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceInfo::release_service_name() {
  // @@protoc_insertion_point(field_release:cloudstate.ServiceInfo.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInfo::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.ServiceInfo.service_name)
}

// string service_version = 2;
inline void ServiceInfo::clear_service_version() {
  service_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceInfo::service_version() const {
  // @@protoc_insertion_point(field_get:cloudstate.ServiceInfo.service_version)
  return _internal_service_version();
}
inline void ServiceInfo::set_service_version(const std::string& value) {
  _internal_set_service_version(value);
  // @@protoc_insertion_point(field_set:cloudstate.ServiceInfo.service_version)
}
inline std::string* ServiceInfo::mutable_service_version() {
  // @@protoc_insertion_point(field_mutable:cloudstate.ServiceInfo.service_version)
  return _internal_mutable_service_version();
}
inline const std::string& ServiceInfo::_internal_service_version() const {
  return service_version_.GetNoArena();
}
inline void ServiceInfo::_internal_set_service_version(const std::string& value) {
  
  service_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceInfo::set_service_version(std::string&& value) {
  
  service_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.ServiceInfo.service_version)
}
inline void ServiceInfo::set_service_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.ServiceInfo.service_version)
}
inline void ServiceInfo::set_service_version(const char* value, size_t size) {
  
  service_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.ServiceInfo.service_version)
}
inline std::string* ServiceInfo::_internal_mutable_service_version() {
  
  return service_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceInfo::release_service_version() {
  // @@protoc_insertion_point(field_release:cloudstate.ServiceInfo.service_version)
  
  return service_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInfo::set_allocated_service_version(std::string* service_version) {
  if (service_version != nullptr) {
    
  } else {
    
  }
  service_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_version);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.ServiceInfo.service_version)
}

// string service_runtime = 3;
inline void ServiceInfo::clear_service_runtime() {
  service_runtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceInfo::service_runtime() const {
  // @@protoc_insertion_point(field_get:cloudstate.ServiceInfo.service_runtime)
  return _internal_service_runtime();
}
inline void ServiceInfo::set_service_runtime(const std::string& value) {
  _internal_set_service_runtime(value);
  // @@protoc_insertion_point(field_set:cloudstate.ServiceInfo.service_runtime)
}
inline std::string* ServiceInfo::mutable_service_runtime() {
  // @@protoc_insertion_point(field_mutable:cloudstate.ServiceInfo.service_runtime)
  return _internal_mutable_service_runtime();
}
inline const std::string& ServiceInfo::_internal_service_runtime() const {
  return service_runtime_.GetNoArena();
}
inline void ServiceInfo::_internal_set_service_runtime(const std::string& value) {
  
  service_runtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceInfo::set_service_runtime(std::string&& value) {
  
  service_runtime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.ServiceInfo.service_runtime)
}
inline void ServiceInfo::set_service_runtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_runtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.ServiceInfo.service_runtime)
}
inline void ServiceInfo::set_service_runtime(const char* value, size_t size) {
  
  service_runtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.ServiceInfo.service_runtime)
}
inline std::string* ServiceInfo::_internal_mutable_service_runtime() {
  
  return service_runtime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceInfo::release_service_runtime() {
  // @@protoc_insertion_point(field_release:cloudstate.ServiceInfo.service_runtime)
  
  return service_runtime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInfo::set_allocated_service_runtime(std::string* service_runtime) {
  if (service_runtime != nullptr) {
    
  } else {
    
  }
  service_runtime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_runtime);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.ServiceInfo.service_runtime)
}

// string support_library_name = 4;
inline void ServiceInfo::clear_support_library_name() {
  support_library_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceInfo::support_library_name() const {
  // @@protoc_insertion_point(field_get:cloudstate.ServiceInfo.support_library_name)
  return _internal_support_library_name();
}
inline void ServiceInfo::set_support_library_name(const std::string& value) {
  _internal_set_support_library_name(value);
  // @@protoc_insertion_point(field_set:cloudstate.ServiceInfo.support_library_name)
}
inline std::string* ServiceInfo::mutable_support_library_name() {
  // @@protoc_insertion_point(field_mutable:cloudstate.ServiceInfo.support_library_name)
  return _internal_mutable_support_library_name();
}
inline const std::string& ServiceInfo::_internal_support_library_name() const {
  return support_library_name_.GetNoArena();
}
inline void ServiceInfo::_internal_set_support_library_name(const std::string& value) {
  
  support_library_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceInfo::set_support_library_name(std::string&& value) {
  
  support_library_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.ServiceInfo.support_library_name)
}
inline void ServiceInfo::set_support_library_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  support_library_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.ServiceInfo.support_library_name)
}
inline void ServiceInfo::set_support_library_name(const char* value, size_t size) {
  
  support_library_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.ServiceInfo.support_library_name)
}
inline std::string* ServiceInfo::_internal_mutable_support_library_name() {
  
  return support_library_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceInfo::release_support_library_name() {
  // @@protoc_insertion_point(field_release:cloudstate.ServiceInfo.support_library_name)
  
  return support_library_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInfo::set_allocated_support_library_name(std::string* support_library_name) {
  if (support_library_name != nullptr) {
    
  } else {
    
  }
  support_library_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), support_library_name);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.ServiceInfo.support_library_name)
}

// string support_library_version = 5;
inline void ServiceInfo::clear_support_library_version() {
  support_library_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceInfo::support_library_version() const {
  // @@protoc_insertion_point(field_get:cloudstate.ServiceInfo.support_library_version)
  return _internal_support_library_version();
}
inline void ServiceInfo::set_support_library_version(const std::string& value) {
  _internal_set_support_library_version(value);
  // @@protoc_insertion_point(field_set:cloudstate.ServiceInfo.support_library_version)
}
inline std::string* ServiceInfo::mutable_support_library_version() {
  // @@protoc_insertion_point(field_mutable:cloudstate.ServiceInfo.support_library_version)
  return _internal_mutable_support_library_version();
}
inline const std::string& ServiceInfo::_internal_support_library_version() const {
  return support_library_version_.GetNoArena();
}
inline void ServiceInfo::_internal_set_support_library_version(const std::string& value) {
  
  support_library_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceInfo::set_support_library_version(std::string&& value) {
  
  support_library_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.ServiceInfo.support_library_version)
}
inline void ServiceInfo::set_support_library_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  support_library_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.ServiceInfo.support_library_version)
}
inline void ServiceInfo::set_support_library_version(const char* value, size_t size) {
  
  support_library_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.ServiceInfo.support_library_version)
}
inline std::string* ServiceInfo::_internal_mutable_support_library_version() {
  
  return support_library_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceInfo::release_support_library_version() {
  // @@protoc_insertion_point(field_release:cloudstate.ServiceInfo.support_library_version)
  
  return support_library_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInfo::set_allocated_support_library_version(std::string* support_library_version) {
  if (support_library_version != nullptr) {
    
  } else {
    
  }
  support_library_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), support_library_version);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.ServiceInfo.support_library_version)
}

// -------------------------------------------------------------------

// Entity

// string entity_type = 1;
inline void Entity::clear_entity_type() {
  entity_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entity::entity_type() const {
  // @@protoc_insertion_point(field_get:cloudstate.Entity.entity_type)
  return _internal_entity_type();
}
inline void Entity::set_entity_type(const std::string& value) {
  _internal_set_entity_type(value);
  // @@protoc_insertion_point(field_set:cloudstate.Entity.entity_type)
}
inline std::string* Entity::mutable_entity_type() {
  // @@protoc_insertion_point(field_mutable:cloudstate.Entity.entity_type)
  return _internal_mutable_entity_type();
}
inline const std::string& Entity::_internal_entity_type() const {
  return entity_type_.GetNoArena();
}
inline void Entity::_internal_set_entity_type(const std::string& value) {
  
  entity_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entity::set_entity_type(std::string&& value) {
  
  entity_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.Entity.entity_type)
}
inline void Entity::set_entity_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.Entity.entity_type)
}
inline void Entity::set_entity_type(const char* value, size_t size) {
  
  entity_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.Entity.entity_type)
}
inline std::string* Entity::_internal_mutable_entity_type() {
  
  return entity_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entity::release_entity_type() {
  // @@protoc_insertion_point(field_release:cloudstate.Entity.entity_type)
  
  return entity_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_entity_type(std::string* entity_type) {
  if (entity_type != nullptr) {
    
  } else {
    
  }
  entity_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_type);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.Entity.entity_type)
}

// string service_name = 2;
inline void Entity::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entity::service_name() const {
  // @@protoc_insertion_point(field_get:cloudstate.Entity.service_name)
  return _internal_service_name();
}
inline void Entity::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:cloudstate.Entity.service_name)
}
inline std::string* Entity::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:cloudstate.Entity.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& Entity::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void Entity::_internal_set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entity::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.Entity.service_name)
}
inline void Entity::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.Entity.service_name)
}
inline void Entity::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.Entity.service_name)
}
inline std::string* Entity::_internal_mutable_service_name() {
  
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entity::release_service_name() {
  // @@protoc_insertion_point(field_release:cloudstate.Entity.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.Entity.service_name)
}

// string persistence_id = 3;
inline void Entity::clear_persistence_id() {
  persistence_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entity::persistence_id() const {
  // @@protoc_insertion_point(field_get:cloudstate.Entity.persistence_id)
  return _internal_persistence_id();
}
inline void Entity::set_persistence_id(const std::string& value) {
  _internal_set_persistence_id(value);
  // @@protoc_insertion_point(field_set:cloudstate.Entity.persistence_id)
}
inline std::string* Entity::mutable_persistence_id() {
  // @@protoc_insertion_point(field_mutable:cloudstate.Entity.persistence_id)
  return _internal_mutable_persistence_id();
}
inline const std::string& Entity::_internal_persistence_id() const {
  return persistence_id_.GetNoArena();
}
inline void Entity::_internal_set_persistence_id(const std::string& value) {
  
  persistence_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entity::set_persistence_id(std::string&& value) {
  
  persistence_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.Entity.persistence_id)
}
inline void Entity::set_persistence_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  persistence_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.Entity.persistence_id)
}
inline void Entity::set_persistence_id(const char* value, size_t size) {
  
  persistence_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.Entity.persistence_id)
}
inline std::string* Entity::_internal_mutable_persistence_id() {
  
  return persistence_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entity::release_persistence_id() {
  // @@protoc_insertion_point(field_release:cloudstate.Entity.persistence_id)
  
  return persistence_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_persistence_id(std::string* persistence_id) {
  if (persistence_id != nullptr) {
    
  } else {
    
  }
  persistence_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persistence_id);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.Entity.persistence_id)
}

// -------------------------------------------------------------------

// UserFunctionError

// string message = 1;
inline void UserFunctionError::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserFunctionError::message() const {
  // @@protoc_insertion_point(field_get:cloudstate.UserFunctionError.message)
  return _internal_message();
}
inline void UserFunctionError::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:cloudstate.UserFunctionError.message)
}
inline std::string* UserFunctionError::mutable_message() {
  // @@protoc_insertion_point(field_mutable:cloudstate.UserFunctionError.message)
  return _internal_mutable_message();
}
inline const std::string& UserFunctionError::_internal_message() const {
  return message_.GetNoArena();
}
inline void UserFunctionError::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserFunctionError::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.UserFunctionError.message)
}
inline void UserFunctionError::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.UserFunctionError.message)
}
inline void UserFunctionError::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.UserFunctionError.message)
}
inline std::string* UserFunctionError::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserFunctionError::release_message() {
  // @@protoc_insertion_point(field_release:cloudstate.UserFunctionError.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserFunctionError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.UserFunctionError.message)
}

// -------------------------------------------------------------------

// ProxyInfo

// int32 protocol_major_version = 1;
inline void ProxyInfo::clear_protocol_major_version() {
  protocol_major_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProxyInfo::_internal_protocol_major_version() const {
  return protocol_major_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProxyInfo::protocol_major_version() const {
  // @@protoc_insertion_point(field_get:cloudstate.ProxyInfo.protocol_major_version)
  return _internal_protocol_major_version();
}
inline void ProxyInfo::_internal_set_protocol_major_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  protocol_major_version_ = value;
}
inline void ProxyInfo::set_protocol_major_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protocol_major_version(value);
  // @@protoc_insertion_point(field_set:cloudstate.ProxyInfo.protocol_major_version)
}

// int32 protocol_minor_version = 2;
inline void ProxyInfo::clear_protocol_minor_version() {
  protocol_minor_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProxyInfo::_internal_protocol_minor_version() const {
  return protocol_minor_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProxyInfo::protocol_minor_version() const {
  // @@protoc_insertion_point(field_get:cloudstate.ProxyInfo.protocol_minor_version)
  return _internal_protocol_minor_version();
}
inline void ProxyInfo::_internal_set_protocol_minor_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  protocol_minor_version_ = value;
}
inline void ProxyInfo::set_protocol_minor_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protocol_minor_version(value);
  // @@protoc_insertion_point(field_set:cloudstate.ProxyInfo.protocol_minor_version)
}

// string proxy_name = 3;
inline void ProxyInfo::clear_proxy_name() {
  proxy_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProxyInfo::proxy_name() const {
  // @@protoc_insertion_point(field_get:cloudstate.ProxyInfo.proxy_name)
  return _internal_proxy_name();
}
inline void ProxyInfo::set_proxy_name(const std::string& value) {
  _internal_set_proxy_name(value);
  // @@protoc_insertion_point(field_set:cloudstate.ProxyInfo.proxy_name)
}
inline std::string* ProxyInfo::mutable_proxy_name() {
  // @@protoc_insertion_point(field_mutable:cloudstate.ProxyInfo.proxy_name)
  return _internal_mutable_proxy_name();
}
inline const std::string& ProxyInfo::_internal_proxy_name() const {
  return proxy_name_.GetNoArena();
}
inline void ProxyInfo::_internal_set_proxy_name(const std::string& value) {
  
  proxy_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProxyInfo::set_proxy_name(std::string&& value) {
  
  proxy_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.ProxyInfo.proxy_name)
}
inline void ProxyInfo::set_proxy_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proxy_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.ProxyInfo.proxy_name)
}
inline void ProxyInfo::set_proxy_name(const char* value, size_t size) {
  
  proxy_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.ProxyInfo.proxy_name)
}
inline std::string* ProxyInfo::_internal_mutable_proxy_name() {
  
  return proxy_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProxyInfo::release_proxy_name() {
  // @@protoc_insertion_point(field_release:cloudstate.ProxyInfo.proxy_name)
  
  return proxy_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyInfo::set_allocated_proxy_name(std::string* proxy_name) {
  if (proxy_name != nullptr) {
    
  } else {
    
  }
  proxy_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proxy_name);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.ProxyInfo.proxy_name)
}

// string proxy_version = 4;
inline void ProxyInfo::clear_proxy_version() {
  proxy_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProxyInfo::proxy_version() const {
  // @@protoc_insertion_point(field_get:cloudstate.ProxyInfo.proxy_version)
  return _internal_proxy_version();
}
inline void ProxyInfo::set_proxy_version(const std::string& value) {
  _internal_set_proxy_version(value);
  // @@protoc_insertion_point(field_set:cloudstate.ProxyInfo.proxy_version)
}
inline std::string* ProxyInfo::mutable_proxy_version() {
  // @@protoc_insertion_point(field_mutable:cloudstate.ProxyInfo.proxy_version)
  return _internal_mutable_proxy_version();
}
inline const std::string& ProxyInfo::_internal_proxy_version() const {
  return proxy_version_.GetNoArena();
}
inline void ProxyInfo::_internal_set_proxy_version(const std::string& value) {
  
  proxy_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProxyInfo::set_proxy_version(std::string&& value) {
  
  proxy_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cloudstate.ProxyInfo.proxy_version)
}
inline void ProxyInfo::set_proxy_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proxy_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cloudstate.ProxyInfo.proxy_version)
}
inline void ProxyInfo::set_proxy_version(const char* value, size_t size) {
  
  proxy_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cloudstate.ProxyInfo.proxy_version)
}
inline std::string* ProxyInfo::_internal_mutable_proxy_version() {
  
  return proxy_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProxyInfo::release_proxy_version() {
  // @@protoc_insertion_point(field_release:cloudstate.ProxyInfo.proxy_version)
  
  return proxy_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyInfo::set_allocated_proxy_version(std::string* proxy_version) {
  if (proxy_version != nullptr) {
    
  } else {
    
  }
  proxy_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proxy_version);
  // @@protoc_insertion_point(field_set_allocated:cloudstate.ProxyInfo.proxy_version)
}

// repeated string supported_entity_types = 5;
inline int ProxyInfo::_internal_supported_entity_types_size() const {
  return supported_entity_types_.size();
}
inline int ProxyInfo::supported_entity_types_size() const {
  return _internal_supported_entity_types_size();
}
inline void ProxyInfo::clear_supported_entity_types() {
  supported_entity_types_.Clear();
}
inline std::string* ProxyInfo::add_supported_entity_types() {
  // @@protoc_insertion_point(field_add_mutable:cloudstate.ProxyInfo.supported_entity_types)
  return _internal_add_supported_entity_types();
}
inline const std::string& ProxyInfo::_internal_supported_entity_types(int index) const {
  return supported_entity_types_.Get(index);
}
inline const std::string& ProxyInfo::supported_entity_types(int index) const {
  // @@protoc_insertion_point(field_get:cloudstate.ProxyInfo.supported_entity_types)
  return _internal_supported_entity_types(index);
}
inline std::string* ProxyInfo::mutable_supported_entity_types(int index) {
  // @@protoc_insertion_point(field_mutable:cloudstate.ProxyInfo.supported_entity_types)
  return supported_entity_types_.Mutable(index);
}
inline void ProxyInfo::set_supported_entity_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cloudstate.ProxyInfo.supported_entity_types)
  supported_entity_types_.Mutable(index)->assign(value);
}
inline void ProxyInfo::set_supported_entity_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cloudstate.ProxyInfo.supported_entity_types)
  supported_entity_types_.Mutable(index)->assign(std::move(value));
}
inline void ProxyInfo::set_supported_entity_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  supported_entity_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cloudstate.ProxyInfo.supported_entity_types)
}
inline void ProxyInfo::set_supported_entity_types(int index, const char* value, size_t size) {
  supported_entity_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cloudstate.ProxyInfo.supported_entity_types)
}
inline std::string* ProxyInfo::_internal_add_supported_entity_types() {
  return supported_entity_types_.Add();
}
inline void ProxyInfo::add_supported_entity_types(const std::string& value) {
  supported_entity_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cloudstate.ProxyInfo.supported_entity_types)
}
inline void ProxyInfo::add_supported_entity_types(std::string&& value) {
  supported_entity_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cloudstate.ProxyInfo.supported_entity_types)
}
inline void ProxyInfo::add_supported_entity_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  supported_entity_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cloudstate.ProxyInfo.supported_entity_types)
}
inline void ProxyInfo::add_supported_entity_types(const char* value, size_t size) {
  supported_entity_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cloudstate.ProxyInfo.supported_entity_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProxyInfo::supported_entity_types() const {
  // @@protoc_insertion_point(field_list:cloudstate.ProxyInfo.supported_entity_types)
  return supported_entity_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProxyInfo::mutable_supported_entity_types() {
  // @@protoc_insertion_point(field_mutable_list:cloudstate.ProxyInfo.supported_entity_types)
  return &supported_entity_types_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cloudstate

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2fcloudstate_2fentity_2eproto
