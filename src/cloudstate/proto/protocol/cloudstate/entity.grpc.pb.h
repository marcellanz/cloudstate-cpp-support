// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protocol/cloudstate/entity.proto
// Original file comments:
// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// gRPC interface for common messages and services for Entity user functions.
//
#ifndef GRPC_protocol_2fcloudstate_2fentity_2eproto__INCLUDED
#define GRPC_protocol_2fcloudstate_2fentity_2eproto__INCLUDED

#include "protocol/cloudstate/entity.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace cloudstate {

// Entity discovery service.
class EntityDiscovery final {
 public:
  static constexpr char const* service_full_name() {
    return "cloudstate.EntityDiscovery";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Discover what entities the user function wishes to serve.
    virtual ::grpc::Status discover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::cloudstate::EntitySpec* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudstate::EntitySpec>> Asyncdiscover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudstate::EntitySpec>>(AsyncdiscoverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudstate::EntitySpec>> PrepareAsyncdiscover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudstate::EntitySpec>>(PrepareAsyncdiscoverRaw(context, request, cq));
    }
    // Report an error back to the user function. This will only be invoked to tell the user function
    // that it has done something wrong, eg, violated the protocol, tried to use an entity type that
    // isn't supported, or attempted to forward to an entity that doesn't exist, etc. These messages
    // should be logged clearly for debugging purposes.
    virtual ::grpc::Status reportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncreportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncreportErrorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncreportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncreportErrorRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Discover what entities the user function wishes to serve.
      virtual void discover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo* request, ::cloudstate::EntitySpec* response, std::function<void(::grpc::Status)>) = 0;
      virtual void discover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::EntitySpec* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void discover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo* request, ::cloudstate::EntitySpec* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void discover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo* request, ::cloudstate::EntitySpec* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void discover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::EntitySpec* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void discover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::EntitySpec* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Report an error back to the user function. This will only be invoked to tell the user function
      // that it has done something wrong, eg, violated the protocol, tried to use an entity type that
      // isn't supported, or attempted to forward to an entity that doesn't exist, etc. These messages
      // should be logged clearly for debugging purposes.
      virtual void reportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void reportError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void reportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void reportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void reportError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void reportError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudstate::EntitySpec>* AsyncdiscoverRaw(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudstate::EntitySpec>* PrepareAsyncdiscoverRaw(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncreportErrorRaw(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncreportErrorRaw(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status discover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::cloudstate::EntitySpec* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudstate::EntitySpec>> Asyncdiscover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudstate::EntitySpec>>(AsyncdiscoverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudstate::EntitySpec>> PrepareAsyncdiscover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudstate::EntitySpec>>(PrepareAsyncdiscoverRaw(context, request, cq));
    }
    ::grpc::Status reportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncreportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncreportErrorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncreportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncreportErrorRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void discover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo* request, ::cloudstate::EntitySpec* response, std::function<void(::grpc::Status)>) override;
      void discover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::EntitySpec* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void discover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo* request, ::cloudstate::EntitySpec* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void discover(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo* request, ::cloudstate::EntitySpec* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void discover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::EntitySpec* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void discover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cloudstate::EntitySpec* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void reportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void reportError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void reportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void reportError(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void reportError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void reportError(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cloudstate::EntitySpec>* AsyncdiscoverRaw(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudstate::EntitySpec>* PrepareAsyncdiscoverRaw(::grpc::ClientContext* context, const ::cloudstate::ProxyInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncreportErrorRaw(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncreportErrorRaw(::grpc::ClientContext* context, const ::cloudstate::UserFunctionError& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_discover_;
    const ::grpc::internal::RpcMethod rpcmethod_reportError_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Discover what entities the user function wishes to serve.
    virtual ::grpc::Status discover(::grpc::ServerContext* context, const ::cloudstate::ProxyInfo* request, ::cloudstate::EntitySpec* response);
    // Report an error back to the user function. This will only be invoked to tell the user function
    // that it has done something wrong, eg, violated the protocol, tried to use an entity type that
    // isn't supported, or attempted to forward to an entity that doesn't exist, etc. These messages
    // should be logged clearly for debugging purposes.
    virtual ::grpc::Status reportError(::grpc::ServerContext* context, const ::cloudstate::UserFunctionError* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_discover() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status discover(::grpc::ServerContext* /*context*/, const ::cloudstate::ProxyInfo* /*request*/, ::cloudstate::EntitySpec* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdiscover(::grpc::ServerContext* context, ::cloudstate::ProxyInfo* request, ::grpc::ServerAsyncResponseWriter< ::cloudstate::EntitySpec>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_reportError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_reportError() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_reportError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reportError(::grpc::ServerContext* /*context*/, const ::cloudstate::UserFunctionError* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreportError(::grpc::ServerContext* context, ::cloudstate::UserFunctionError* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_discover<WithAsyncMethod_reportError<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_discover() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::cloudstate::ProxyInfo, ::cloudstate::EntitySpec>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudstate::ProxyInfo* request, ::cloudstate::EntitySpec* response) { return this->discover(context, request, response); }));}
    void SetMessageAllocatorFor_discover(
        ::grpc::experimental::MessageAllocator< ::cloudstate::ProxyInfo, ::cloudstate::EntitySpec>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::cloudstate::ProxyInfo, ::cloudstate::EntitySpec>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status discover(::grpc::ServerContext* /*context*/, const ::cloudstate::ProxyInfo* /*request*/, ::cloudstate::EntitySpec* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* discover(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudstate::ProxyInfo* /*request*/, ::cloudstate::EntitySpec* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* discover(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudstate::ProxyInfo* /*request*/, ::cloudstate::EntitySpec* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_reportError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_reportError() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::cloudstate::UserFunctionError, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::cloudstate::UserFunctionError* request, ::google::protobuf::Empty* response) { return this->reportError(context, request, response); }));}
    void SetMessageAllocatorFor_reportError(
        ::grpc::experimental::MessageAllocator< ::cloudstate::UserFunctionError, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::cloudstate::UserFunctionError, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_reportError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reportError(::grpc::ServerContext* /*context*/, const ::cloudstate::UserFunctionError* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* reportError(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudstate::UserFunctionError* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* reportError(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::cloudstate::UserFunctionError* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_discover<ExperimentalWithCallbackMethod_reportError<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_discover<ExperimentalWithCallbackMethod_reportError<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_discover() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status discover(::grpc::ServerContext* /*context*/, const ::cloudstate::ProxyInfo* /*request*/, ::cloudstate::EntitySpec* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_reportError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_reportError() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_reportError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reportError(::grpc::ServerContext* /*context*/, const ::cloudstate::UserFunctionError* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_discover() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status discover(::grpc::ServerContext* /*context*/, const ::cloudstate::ProxyInfo* /*request*/, ::cloudstate::EntitySpec* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdiscover(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_reportError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_reportError() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_reportError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reportError(::grpc::ServerContext* /*context*/, const ::cloudstate::UserFunctionError* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreportError(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_discover() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->discover(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status discover(::grpc::ServerContext* /*context*/, const ::cloudstate::ProxyInfo* /*request*/, ::cloudstate::EntitySpec* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* discover(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* discover(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_reportError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_reportError() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->reportError(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_reportError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reportError(::grpc::ServerContext* /*context*/, const ::cloudstate::UserFunctionError* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* reportError(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* reportError(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_discover() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::cloudstate::ProxyInfo, ::cloudstate::EntitySpec>(std::bind(&WithStreamedUnaryMethod_discover<BaseClass>::Streameddiscover, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status discover(::grpc::ServerContext* /*context*/, const ::cloudstate::ProxyInfo* /*request*/, ::cloudstate::EntitySpec* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddiscover(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudstate::ProxyInfo,::cloudstate::EntitySpec>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_reportError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_reportError() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::cloudstate::UserFunctionError, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_reportError<BaseClass>::StreamedreportError, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_reportError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status reportError(::grpc::ServerContext* /*context*/, const ::cloudstate::UserFunctionError* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreportError(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudstate::UserFunctionError,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_discover<WithStreamedUnaryMethod_reportError<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_discover<WithStreamedUnaryMethod_reportError<Service > > StreamedService;
};

}  // namespace cloudstate


#endif  // GRPC_protocol_2fcloudstate_2fentity_2eproto__INCLUDED
